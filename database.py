import sqlite3
import json
import os
import shutil
from datetime import datetime, timedelta
from typing import List, Dict, Any, Optional
import logging
from werkzeug.security import generate_password_hash, check_password_hash

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)
try:
    fmt = logging.Formatter('%(asctime)s [%(levelname)s] [%(name)s] %(message)s', datefmt='%Y-%m-%d %H:%M:%S')
    for h in logging.getLogger().handlers:
        if isinstance(h, logging.StreamHandler):
            h.setFormatter(fmt)
except Exception:
    pass
# –í —Ç–µ—Å—Ç–∞—Ö –æ—Ç–∫–ª—é—á–∞–µ–º —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ –≤ root, —á—Ç–æ–±—ã –Ω–µ –ø–∏—Å–∞—Ç—å –≤ –∑–∞–∫—Ä—ã—Ç—ã–π stdout –∏–∑ —Ñ–æ–Ω–æ–≤—ã—Ö –ø–æ—Ç–æ–∫–æ–≤
logger.propagate = False

class IrrigationDB:
    def __init__(self, db_path: str = 'irrigation.db'):
        self.db_path = db_path
        self.backup_dir = 'backups'
        self.init_database()
    
    def init_database(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        try:
            with sqlite3.connect(self.db_path, timeout=5) as conn:
                # PRAGMA
                try:
                    conn.execute('PRAGMA journal_mode=WAL')
                    conn.execute('PRAGMA foreign_keys=ON')
                except Exception:
                    pass
                # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
                conn.execute('''
                    CREATE TABLE IF NOT EXISTS zones (
                        id INTEGER PRIMARY KEY,
                        state TEXT DEFAULT 'off',
                        name TEXT NOT NULL,
                        icon TEXT DEFAULT 'üåø',
                        duration INTEGER DEFAULT 10,
                        group_id INTEGER DEFAULT 1,
                        topic TEXT,
                        postpone_until TEXT,
                        postpone_reason TEXT,
                        photo_path TEXT,
                        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                    )
                ''')
                
                conn.execute('''
                    CREATE TABLE IF NOT EXISTS settings (
                        key TEXT PRIMARY KEY,
                        value TEXT
                    )
                ''')
                
                conn.execute('''
                    CREATE TABLE IF NOT EXISTS groups (
                        id INTEGER PRIMARY KEY,
                        name TEXT NOT NULL UNIQUE,
                        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                    )
                ''')
                
                conn.execute('''
                    CREATE TABLE IF NOT EXISTS programs (
                        id INTEGER PRIMARY KEY,
                        name TEXT NOT NULL,
                        time TEXT NOT NULL,
                        days TEXT NOT NULL,
                        zones TEXT NOT NULL,
                        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                    )
                ''')
                
                conn.execute('''
                    CREATE TABLE IF NOT EXISTS logs (
                        id INTEGER PRIMARY KEY AUTOINCREMENT,
                        type TEXT NOT NULL,
                        details TEXT,
                        timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                    )
                ''')
                
                conn.execute('''
                    CREATE TABLE IF NOT EXISTS water_usage (
                        id INTEGER PRIMARY KEY AUTOINCREMENT,
                        zone_id INTEGER,
                        liters REAL,
                        timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                    )
                ''')
                
                # –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤
                conn.execute('CREATE INDEX IF NOT EXISTS idx_zones_group ON zones(group_id)')
                conn.execute('CREATE INDEX IF NOT EXISTS idx_logs_type ON logs(type)')
                conn.execute('CREATE INDEX IF NOT EXISTS idx_logs_timestamp ON logs(timestamp)')
                conn.execute('CREATE INDEX IF NOT EXISTS idx_water_zone ON water_usage(zone_id)')
                conn.execute('CREATE INDEX IF NOT EXISTS idx_water_timestamp ON water_usage(timestamp)')
                
                conn.commit()
                
                # –í—Å—Ç–∞–≤–∫–∞ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                self._insert_initial_data(conn)
                
                # –ú–∏–≥—Ä–∞—Ü–∏–∏
                self._migrate_days_format(conn)
                self._migrate_add_postpone_reason(conn)
                self._migrate_add_watering_start_time(conn)
                self._migrate_add_scheduled_start_time(conn)
                self._migrate_add_last_watering_time(conn)
                self._migrate_add_mqtt_servers(conn)
                self._migrate_add_zone_mqtt_server_id(conn)
                self._migrate_ensure_special_group(conn)
                self._migrate_add_zones_indexes(conn)
                self._migrate_add_group_rain_flag(conn)
                self._migrate_add_watering_start_source(conn)
                
                logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
            raise
    
    def _insert_initial_data(self, conn):
        """–í—Å—Ç–∞–≤–∏—Ç—å –Ω–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"""
        try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –¥–∞–Ω–Ω—ã–µ
                cursor = conn.execute('SELECT COUNT(*) FROM zones')
                if cursor.fetchone()[0] > 0:
                    # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –∑–∞–¥–∞–Ω –ø–∞—Ä–æ–ª—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                    cur = conn.execute('SELECT value FROM settings WHERE key = ? LIMIT 1', ('password_hash',))
                    if cur.fetchone() is None:
                        conn.execute('INSERT OR REPLACE INTO settings(key, value) VALUES (?, ?)', (
                            'password_hash', generate_password_hash('1234', method='pbkdf2:sha256')
                        ))
                        conn.commit()
                    return  # –î–∞–Ω–Ω—ã–µ —É–∂–µ –µ—Å—Ç—å
                
                # –°–æ–∑–¥–∞—ë–º —Ç–æ–ª—å–∫–æ –±–∞–∑–æ–≤—ã–µ –≥—Ä—É–ø–ø—ã: 1 ‚Äî –ù–∞—Å–æ—Å-1, 999 ‚Äî –ë–ï–ó –ü–û–õ–ò–í–ê
                groups = [
                    (1, '–ù–∞—Å–æ—Å-1'),
                    (999, '–ë–ï–ó –ü–û–õ–ò–í–ê')
                ]
                for group_id, name in groups:
                    conn.execute('INSERT OR IGNORE INTO groups (id, name) VALUES (?, ?)', (group_id, name))
                
                # –ë–µ–∑ –ø—Ä–µ–¥–∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∑–æ–Ω/–ø—Ä–æ–≥—Ä–∞–º–º/–ª–æ–≥–æ–≤ ‚Äî —á–∏—Å—Ç–∞—è –±–∞–∑–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                conn.commit()
                # –ü–∞—Ä–æ–ª—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 1234
                conn.execute('INSERT OR REPLACE INTO settings(key, value) VALUES (?, ?)', (
                    'password_hash', generate_password_hash('1234', method='pbkdf2:sha256')
                ))
                conn.commit()
                logger.info("–ù–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤—Å—Ç–∞–≤–ª–µ–Ω—ã: –≥—Ä—É–ø–ø—ã 1 (–ù–∞—Å–æ—Å-1) –∏ 999 (–ë–ï–ó –ü–û–õ–ò–í–ê)")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤—Å—Ç–∞–≤–∫–∏ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")

    def _migrate_days_format(self, conn):
        """–ú–∏–≥—Ä–∞—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∞ –¥–Ω–µ–π –ø—Ä–æ–≥—Ä–∞–º–º –∫ 0-6 (0=–ü–Ω)"""
        try:
            cursor = conn.execute('SELECT id, days FROM programs')
            rows = cursor.fetchall()
            for pid, days_json in rows:
                try:
                    days = json.loads(days_json)
                    if isinstance(days, list) and days:
                        # –ï—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏—è –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ 0-6 ‚Äî –ø–æ–ø—Ä–æ–±—É–µ–º —Å–º–µ—Å—Ç–∏—Ç—å –∏–∑ 1-7
                        if any(d < 0 or d > 6 for d in days):
                            migrated = []
                            for d in days:
                                try:
                                    nd = int(d) - 1
                                except Exception:
                                    continue
                                if nd < 0:
                                    nd = 0
                                if nd > 6:
                                    nd = 6
                                migrated.append(nd)
                            conn.execute('UPDATE programs SET days = ?, updated_at = CURRENT_TIMESTAMP WHERE id = ?', (json.dumps(sorted(set(migrated))), pid))
                except Exception:
                    continue
            conn.commit()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–Ω–µ–π: {e}")
    
    def _migrate_add_postpone_reason(self, conn):
        """–ú–∏–≥—Ä–∞—Ü–∏—è: –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—è postpone_reason"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –ø–æ–ª–µ postpone_reason
            cursor = conn.execute("PRAGMA table_info(zones)")
            columns = [column[1] for column in cursor.fetchall()]
            
            if 'postpone_reason' not in columns:
                conn.execute('ALTER TABLE zones ADD COLUMN postpone_reason TEXT')
                conn.commit()
                logger.info("–î–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–ª–µ postpone_reason –≤ —Ç–∞–±–ª–∏—Ü—É zones")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ postpone_reason: {e}")
    
    def _migrate_add_watering_start_time(self, conn):
        """–ú–∏–≥—Ä–∞—Ü–∏—è: –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—è watering_start_time"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –ø–æ–ª–µ watering_start_time
            cursor = conn.execute("PRAGMA table_info(zones)")
            columns = [column[1] for column in cursor.fetchall()]
            
            if 'watering_start_time' not in columns:
                conn.execute('ALTER TABLE zones ADD COLUMN watering_start_time TEXT')
                conn.commit()
                logger.info("–î–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–ª–µ watering_start_time –≤ —Ç–∞–±–ª–∏—Ü—É zones")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ watering_start_time: {e}")

    def _migrate_add_scheduled_start_time(self, conn):
        """–ú–∏–≥—Ä–∞—Ü–∏—è: –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—è scheduled_start_time (–ø–ª–∞–Ω–æ–≤–æ–µ –≤—Ä–µ–º—è —Å—Ç–∞—Ä—Ç–∞)"""
        try:
            cursor = conn.execute("PRAGMA table_info(zones)")
            columns = [column[1] for column in cursor.fetchall()]
            if 'scheduled_start_time' not in columns:
                conn.execute('ALTER TABLE zones ADD COLUMN scheduled_start_time TEXT')
                conn.commit()
                logger.info("–î–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–ª–µ scheduled_start_time –≤ —Ç–∞–±–ª–∏—Ü—É zones")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ scheduled_start_time: {e}")

    def _migrate_add_last_watering_time(self, conn):
        """–ú–∏–≥—Ä–∞—Ü–∏—è: –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—è last_watering_time (–≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–æ–ª–∏–≤–∞)"""
        try:
            cursor = conn.execute("PRAGMA table_info(zones)")
            columns = [column[1] for column in cursor.fetchall()]
            if 'last_watering_time' not in columns:
                conn.execute('ALTER TABLE zones ADD COLUMN last_watering_time TEXT')
                conn.commit()
                logger.info("–î–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–ª–µ last_watering_time –≤ —Ç–∞–±–ª–∏—Ü—É zones")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ last_watering_time: {e}")

    def _migrate_add_watering_start_source(self, conn):
        """–ú–∏–≥—Ä–∞—Ü–∏—è: —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫ —Å—Ç–∞—Ä—Ç–∞ –ø–æ–ª–∏–≤–∞ (manual|schedule)."""
        try:
            cursor = conn.execute("PRAGMA table_info(zones)")
            columns = [column[1] for column in cursor.fetchall()]
            if 'watering_start_source' not in columns:
                conn.execute('ALTER TABLE zones ADD COLUMN watering_start_source TEXT')
                conn.commit()
                logger.info("–î–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–ª–µ watering_start_source –≤ —Ç–∞–±–ª–∏—Ü—É zones")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ watering_start_source: {e}")

    def _migrate_add_group_rain_flag(self, conn):
        """–ú–∏–≥—Ä–∞—Ü–∏—è: —Ñ–ª–∞–≥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –¥–∞—Ç—á–∏–∫–∞ –¥–æ–∂–¥—è –Ω–∞ —É—Ä–æ–≤–Ω–µ –≥—Ä—É–ø–ø—ã"""
        try:
            cursor = conn.execute("PRAGMA table_info(groups)")
            columns = [column[1] for column in cursor.fetchall()]
            if 'use_rain_sensor' not in columns:
                conn.execute('ALTER TABLE groups ADD COLUMN use_rain_sensor INTEGER DEFAULT 0')
                conn.commit()
                logger.info("–î–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–ª–µ use_rain_sensor –≤ —Ç–∞–±–ª–∏—Ü—É groups")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ use_rain_sensor: {e}")

    def _migrate_add_mqtt_servers(self, conn):
        """–ú–∏–≥—Ä–∞—Ü–∏—è: —Ç–∞–±–ª–∏—Ü–∞ MQTT —Å–µ—Ä–≤–µ—Ä–æ–≤"""
        try:
            conn.execute('''
                CREATE TABLE IF NOT EXISTS mqtt_servers (
                    id INTEGER PRIMARY KEY,
                    name TEXT NOT NULL,
                    host TEXT NOT NULL,
                    port INTEGER DEFAULT 1883,
                    username TEXT,
                    password TEXT,
                    client_id TEXT,
                    enabled INTEGER DEFAULT 1,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            ''')
            conn.commit()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ mqtt_servers: {e}")

    def _migrate_add_zone_mqtt_server_id(self, conn):
        """–ú–∏–≥—Ä–∞—Ü–∏—è: –ø–æ–ª–µ mqtt_server_id —É –∑–æ–Ω"""
        try:
            cursor = conn.execute("PRAGMA table_info(zones)")
            columns = [column[1] for column in cursor.fetchall()]
            if 'mqtt_server_id' not in columns:
                conn.execute('ALTER TABLE zones ADD COLUMN mqtt_server_id INTEGER')
                conn.commit()
                logger.info("–î–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–ª–µ mqtt_server_id –≤ —Ç–∞–±–ª–∏—Ü—É zones")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ mqtt_server_id: {e}")

    def _migrate_ensure_special_group(self, conn):
        """–ú–∏–≥—Ä–∞—Ü–∏—è: –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–ª–∏—á–∏–µ —Å–ª—É–∂–µ–±–Ω–æ–π –≥—Ä—É–ø–ø—ã 999 '–ë–ï–ó –ü–û–õ–ò–í–ê'"""
        try:
            cur = conn.execute('SELECT COUNT(*) FROM groups WHERE id = 999')
            cnt = cur.fetchone()[0] if cur else 0
            if cnt == 0:
                conn.execute("INSERT OR IGNORE INTO groups (id, name) VALUES (999, '–ë–ï–ó –ü–û–õ–ò–í–ê')")
                conn.commit()
                logger.info("–î–æ–±–∞–≤–ª–µ–Ω–∞ —Å–ª—É–∂–µ–±–Ω–∞—è –≥—Ä—É–ø–ø–∞ 999 '–ë–ï–ó –ü–û–õ–ò–í–ê'")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ ensure_special_group: {e}")

    def _migrate_add_zones_indexes(self, conn):
        """–ú–∏–≥—Ä–∞—Ü–∏—è: –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è –≤—ã–±–æ—Ä–æ–∫ –∑–æ–Ω –ø–æ MQTT.

        –ò–Ω–¥–µ–∫—Å—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ —Å–æ–∑–¥–∞—é—Ç—Å—è idempotent-–Ω–æ (IF NOT EXISTS).
        """
        try:
            conn.execute('CREATE INDEX IF NOT EXISTS idx_zones_mqtt_server ON zones(mqtt_server_id)')
            conn.execute('CREATE INDEX IF NOT EXISTS idx_zones_topic ON zones(topic)')
            conn.commit()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ –∏–Ω–¥–µ–∫—Å–æ–≤ zones: {e}")

    def get_zones(self) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∑–æ–Ω—ã"""
        try:
            with sqlite3.connect(self.db_path, timeout=5) as conn:
                conn.row_factory = sqlite3.Row
                cursor = conn.execute('''
                    SELECT z.*, g.name as group_name 
                    FROM zones z 
                    LEFT JOIN groups g ON z.group_id = g.id 
                    ORDER BY z.id
                ''')
                zones = []
                for row in cursor.fetchall():
                    zone = dict(row)
                    zone['group'] = zone['group_id']  # –î–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–æ–º
                    zones.append(zone)
                return zones
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–æ–Ω: {e}")
            return []
    
    def get_zone(self, zone_id: int) -> Optional[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∏—Ç—å –∑–æ–Ω—É –ø–æ ID"""
        try:
            with sqlite3.connect(self.db_path, timeout=5) as conn:
                conn.row_factory = sqlite3.Row
                cursor = conn.execute('''
                    SELECT z.*, g.name as group_name 
                    FROM zones z 
                    LEFT JOIN groups g ON z.group_id = g.id 
                    WHERE z.id = ?
                ''', (zone_id,))
                row = cursor.fetchone()
                if row:
                    zone = dict(row)
                    zone['group'] = zone['group_id']
                    return zone
                return None
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–æ–Ω—ã {zone_id}: {e}")
            return None
    
    def create_zone(self, zone_data: Dict[str, Any]) -> Optional[Dict[str, Any]]:
        """–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–æ–Ω—É"""
        try:
            with sqlite3.connect(self.db_path, timeout=5) as conn:
                # –ë–µ—Ä—ë–º topic –∫–∞–∫ –µ—Å—Ç—å, –±–µ–∑ –∫–∞–∫–æ–π-–ª–∏–±–æ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏
                topic = (zone_data.get('topic') or '').strip()
                zid_explicit = None
                try:
                    zid_explicit = int(zone_data.get('id')) if zone_data.get('id') is not None else None
                except Exception:
                    zid_explicit = None
                
                if zid_explicit is not None:
                    try:
                        conn.execute('''
                            INSERT INTO zones (id, name, icon, duration, group_id, topic, mqtt_server_id)
                            VALUES (?, ?, ?, ?, ?, ?, ?)
                        ''', (
                            zid_explicit,
                            zone_data.get('name') or '–ó–æ–Ω–∞',
                            zone_data.get('icon') or 'üåø',
                            int(zone_data.get('duration') or 10),
                            int(zone_data.get('group_id', zone_data.get('group', 1))),
                            topic,
                            zone_data.get('mqtt_server_id')
                        ))
                        conn.commit()
                        return self.get_zone(zid_explicit)
                    except Exception:
                        # fallback ‚Äî –±–µ–∑ —è–≤–Ω–æ–≥–æ id
                        pass
                cursor = conn.execute('''
                    INSERT INTO zones (name, icon, duration, group_id, topic, mqtt_server_id)
                    VALUES (?, ?, ?, ?, ?, ?)
                ''', (
                    zone_data.get('name') or '–ó–æ–Ω–∞',
                    zone_data.get('icon') or 'üåø',
                    int(zone_data.get('duration') or 10),
                    int(zone_data.get('group_id', zone_data.get('group', 1))),
                    topic,
                    zone_data.get('mqtt_server_id')
                ))
                zone_id = cursor.lastrowid
                conn.commit()
                return self.get_zone(zone_id)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–æ–Ω—ã: {e}")
            return None
    
    def update_zone(self, zone_id: int, zone_data: Dict[str, Any]) -> Optional[Dict[str, Any]]:
        """–û–±–Ω–æ–≤–∏—Ç—å –∑–æ–Ω—É"""
        try:
            with sqlite3.connect(self.db_path, timeout=5) as conn:
                # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –∑–æ–Ω—ã
                current_zone = self.get_zone(zone_id)
                if not current_zone:
                    return None
                
                # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ —Å –Ω–æ–≤—ã–º–∏
                updated_data = current_zone.copy()
                updated_data.update(zone_data)
                
                # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º SQL –∑–∞–ø—Ä–æ—Å —Å —É—á–µ—Ç–æ–º –≤—Å–µ—Ö –ø–æ–ª–µ–π
                sql_fields = []
                params = []
                
                if 'name' in updated_data:
                    sql_fields.append('name = ?')
                    params.append(updated_data['name'])
                
                if 'icon' in updated_data:
                    sql_fields.append('icon = ?')
                    params.append(updated_data['icon'])
                
                if 'duration' in updated_data:
                    sql_fields.append('duration = ?')
                    params.append(updated_data['duration'])
                
                if 'group_id' in updated_data or 'group' in updated_data:
                    sql_fields.append('group_id = ?')
                    params.append(updated_data.get('group_id', updated_data.get('group', 1)))
                
                if 'topic' in updated_data:
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º topic –∫–∞–∫ –µ—Å—Ç—å, –±–µ–∑ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏
                    sql_fields.append('topic = ?')
                    params.append((updated_data.get('topic') or '').strip())
                
                if 'state' in updated_data:
                    sql_fields.append('state = ?')
                    params.append(updated_data['state'])
                
                if 'postpone_until' in updated_data:
                    sql_fields.append('postpone_until = ?')
                    params.append(updated_data['postpone_until'])
                
                if 'photo_path' in updated_data:
                    sql_fields.append('photo_path = ?')
                    params.append(updated_data['photo_path'])
                
                # –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞ –ø–æ–ª–∏–≤–∞
                if 'watering_start_time' in updated_data:
                    sql_fields.append('watering_start_time = ?')
                    params.append(updated_data['watering_start_time'])

                if 'scheduled_start_time' in updated_data:
                    sql_fields.append('scheduled_start_time = ?')
                    params.append(updated_data['scheduled_start_time'])

                if 'last_watering_time' in updated_data:
                    sql_fields.append('last_watering_time = ?')
                    params.append(updated_data['last_watering_time'])
                
                if 'mqtt_server_id' in updated_data:
                    sql_fields.append('mqtt_server_id = ?')
                    params.append(updated_data.get('mqtt_server_id'))
                
                # –î–æ–±–∞–≤–ª—è–µ–º updated_at
                sql_fields.append('updated_at = CURRENT_TIMESTAMP')
                
                # –î–æ–±–∞–≤–ª—è–µ–º ID –∑–æ–Ω—ã
                params.append(zone_id)
                
                # –í—ã–ø–æ–ª–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
                sql = f'''
                    UPDATE zones 
                    SET {', '.join(sql_fields)}
                    WHERE id = ?
                '''
                
                conn.execute(sql, params)

                # –ï—Å–ª–∏ –∑–æ–Ω—É –ø–µ—Ä–µ–≤–æ–¥—è—Ç –≤ –≥—Ä—É–ø–ø—É 999 (–ë–ï–ó –ü–û–õ–ò–í–ê) ‚Äî –∏—Å–∫–ª—é—á–∞–µ–º –µ—ë –∏–∑ –≤—Å–µ—Ö –ø—Ä–æ–≥—Ä–∞–º–º
                target_group_id = updated_data.get('group_id', updated_data.get('group'))
                if target_group_id == 999:
                    cursor = conn.execute('SELECT id, zones FROM programs')
                    for row in cursor.fetchall():
                        try:
                            zones_list = json.loads(row[1])
                        except Exception:
                            continue
                        if zone_id in zones_list:
                            zones_list = [z for z in zones_list if z != zone_id]
                            conn.execute('UPDATE programs SET zones = ?, updated_at = CURRENT_TIMESTAMP WHERE id = ?', (json.dumps(zones_list), row[0]))

                conn.commit()
                return self.get_zone(zone_id)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–æ–Ω—ã {zone_id}: {e}")
            return None
    
    def delete_zone(self, zone_id: int) -> bool:
        """–£–¥–∞–ª–∏—Ç—å –∑–æ–Ω—É"""
        try:
            with sqlite3.connect(self.db_path, timeout=5) as conn:
                conn.execute('DELETE FROM zones WHERE id = ?', (zone_id,))
                conn.commit()
                return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–æ–Ω—ã {zone_id}: {e}")
            return False
    
    def get_groups(self) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –≥—Ä—É–ø–ø—ã"""
        try:
            with sqlite3.connect(self.db_path, timeout=5) as conn:
                conn.row_factory = sqlite3.Row
                cursor = conn.execute('''
                    SELECT g.*, COUNT(z.id) as zone_count
                    FROM groups g
                    LEFT JOIN zones z ON g.id = z.group_id
                    GROUP BY g.id
                    ORDER BY g.id
                ''')
                return [dict(row) for row in cursor.fetchall()]
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≥—Ä—É–ø–ø: {e}")
            return []

    def create_group(self, name: str) -> Optional[Dict[str, Any]]:
        """–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –≥—Ä—É–ø–ø—É"""
        try:
            with sqlite3.connect(self.db_path, timeout=5) as conn:
                cursor = conn.execute('INSERT INTO groups (name) VALUES (?)', (name,))
                new_id = cursor.lastrowid
                conn.commit()
                return {'id': new_id, 'name': name, 'zone_count': 0}
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä—É–ø–ø—ã '{name}': {e}")
            return None

    def delete_group(self, group_id: int) -> bool:
        """–£–¥–∞–ª–∏—Ç—å –≥—Ä—É–ø–ø—É. –ó–∞–ø—Ä–µ—â–µ–Ω–æ, –µ—Å–ª–∏ –≤ –≥—Ä—É–ø–ø–µ –µ—Å—Ç—å –∑–æ–Ω—ã.

        –ü–æ–ª–∏—Ç–∏–∫–∞: –±–µ–∑–æ–ø–∞—Å–Ω–µ–µ —è–≤–Ω–æ –∑–∞–ø—Ä–µ—Ç–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ –Ω–µ–ø—É—Å—Ç—ã—Ö –≥—Ä—É–ø–ø. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å 
        –¥–æ–ª–∂–µ–Ω —Å–∞–º –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ –∑–æ–Ω—ã –≤ –¥—Ä—É–≥–∏–µ –≥—Ä—É–ø–ø—ã –∏–ª–∏ 999 (–ë–ï–ó –ü–û–õ–ò–í–ê), –∞ –∑–∞—Ç–µ–º —É–¥–∞–ª–∏—Ç—å.
        """
        try:
            if group_id == 999:
                return False
            with sqlite3.connect(self.db_path, timeout=5) as conn:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∑–æ–Ω—ã –≤ –≥—Ä—É–ø–ø–µ
                cursor = conn.execute('SELECT COUNT(*) FROM zones WHERE group_id = ?', (group_id,))
                cnt = cursor.fetchone()[0]
                if cnt > 0:
                    return False
                # –£–¥–∞–ª—è–µ–º –≥—Ä—É–ø–ø—É
                conn.execute('DELETE FROM groups WHERE id = ?', (group_id,))
                conn.commit()
                return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø—ã {group_id}: {e}")
            return False

    def get_zones_by_group(self, group_id: int) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∏—Ç—å –∑–æ–Ω—ã –ø–æ –≥—Ä—É–ø–ø–µ"""
        try:
            with sqlite3.connect(self.db_path, timeout=5) as conn:
                conn.row_factory = sqlite3.Row
                cursor = conn.execute('''
                    SELECT z.*, g.name as group_name 
                    FROM zones z 
                    LEFT JOIN groups g ON z.group_id = g.id 
                    WHERE z.group_id = ?
                    ORDER BY z.id
                ''', (group_id,))
                zones = []
                for row in cursor.fetchall():
                    zone = dict(row)
                    zone['group'] = zone['group_id']  # –î–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–æ–º
                    zones.append(zone)
                return zones
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–æ–Ω –≥—Ä—É–ø–ø—ã {group_id}: {e}")
            return []

    def clear_group_scheduled_starts(self, group_id: int) -> None:
        """–û—á–∏—Å—Ç–∏—Ç—å –ø–ª–∞–Ω–æ–≤—ã–µ –≤—Ä–µ–º–µ–Ω–∞ —Å—Ç–∞—Ä—Ç–∞ —É –≤—Å–µ—Ö –∑–æ–Ω –≤ –≥—Ä—É–ø–ø–µ"""
        try:
            with sqlite3.connect(self.db_path) as conn:
                conn.execute('''
                    UPDATE zones
                    SET scheduled_start_time = NULL, updated_at = CURRENT_TIMESTAMP
                    WHERE group_id = ?
                ''', (group_id,))
                conn.commit()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ scheduled_start_time –≤ –≥—Ä—É–ø–ø–µ {group_id}: {e}")

    def set_group_scheduled_starts(self, group_id: int, schedule: Dict[int, str]) -> None:
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–ª–∞–Ω–æ–≤—ã–µ –≤—Ä–µ–º–µ–Ω–∞ —Å—Ç–∞—Ä—Ç–∞ –ø–æ –∑–æ–Ω–µ –≤ –≥—Ä—É–ø–ø–µ. schedule: {zone_id: '%Y-%m-%d %H:%M:%S'}"""
        try:
            with sqlite3.connect(self.db_path) as conn:
                for zone_id, ts in schedule.items():
                    conn.execute('''
                        UPDATE zones
                        SET scheduled_start_time = ?, updated_at = CURRENT_TIMESTAMP
                        WHERE id = ? AND group_id = ?
                    ''', (ts, zone_id, group_id))
                conn.commit()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è scheduled_start_time –¥–ª—è –≥—Ä—É–ø–ø—ã {group_id}: {e}")

    # ===== –ù–∞—Å—Ç—Ä–æ–π–∫–∏ (settings) ‚Äî —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ –≥–µ—Ç—Ç–µ—Ä—ã/—Å–µ—Ç—Ç–µ—Ä—ã –∏ –∫–æ–Ω—Ñ–∏–≥ –¥–∞—Ç—á–∏–∫–∞ –¥–æ–∂–¥—è =====
    def get_setting_value(self, key: str) -> Optional[str]:
        try:
            with sqlite3.connect(self.db_path) as conn:
                conn.row_factory = sqlite3.Row
                cur = conn.execute('SELECT value FROM settings WHERE key = ? LIMIT 1', (key,))
                row = cur.fetchone()
                return str(row['value']) if row and row['value'] is not None else None
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è settings[{key}]: {e}")
            return None

    def set_setting_value(self, key: str, value: Optional[str]) -> bool:
        try:
            with sqlite3.connect(self.db_path) as conn:
                if value is None:
                    conn.execute('DELETE FROM settings WHERE key = ?', (key,))
                else:
                    conn.execute('INSERT OR REPLACE INTO settings(key, value) VALUES (?, ?)', (key, str(value)))
                conn.commit()
                return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ settings[{key}]: {e}")
            return False

    def ensure_password_change_required(self) -> None:
        """–ï—Å–ª–∏ –ø–∞—Ä–æ–ª—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π (1234) –ª–∏–±–æ –ø–∞—Ä–æ–ª—å –µ—â—ë –Ω–µ –º–µ–Ω—è–ª–∏, –≤—ã—Å—Ç–∞–≤–∏—Ç—å —Ñ–ª–∞–≥ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–π —Å–º–µ–Ω—ã."""
        try:
            with sqlite3.connect(self.db_path) as conn:
                conn.row_factory = sqlite3.Row
                cur = conn.execute('SELECT value FROM settings WHERE key = ? LIMIT 1', ('password_hash',))
                row = cur.fetchone()
                if not row:
                    # –ù–µ—Ç –ø–∞—Ä–æ–ª—è ‚Äî —Ç—Ä–µ–±—É–µ–º —Å–º–µ–Ω—É
                    conn.execute('INSERT OR REPLACE INTO settings(key, value) VALUES (?, ?)', ('password_must_change', '1'))
                else:
                    # –ï—Å–ª–∏ –≤ –±–∞–∑–µ –µ—â—ë –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π —Ö—ç—à (–≥—Ä—É–±–∞—è —ç–≤—Ä–∏—Å—Ç–∏–∫–∞: –¥–æ–ø—É—Å–∫–∞–µ–º, —á—Ç–æ 1234 –±—ã–ª –∑–∞–ø–∏—Å–∞–Ω),
                    # –≤—Å—ë —Ä–∞–≤–Ω–æ —Ñ–æ—Ä—Å–∏—Ä—É–µ–º —Å–º–µ–Ω—É –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –≤—Ö–æ–¥–µ
                    cur2 = conn.execute('SELECT value FROM settings WHERE key = ? LIMIT 1', ('password_must_change',))
                    row2 = cur2.fetchone()
                    if not row2:
                        conn.execute('INSERT OR REPLACE INTO settings(key, value) VALUES (?, ?)', ('password_must_change', '1'))
                conn.commit()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ñ–ª–∞–≥–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–π —Å–º–µ–Ω—ã –ø–∞—Ä–æ–ª—è: {e}")

    # ===== –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ: —Ñ–ª–∞–≥ debug =====
    def get_logging_debug(self) -> bool:
        val = self.get_setting_value('logging.debug')
        return str(val or '0') in ('1','true','True')

    def set_logging_debug(self, enabled: bool) -> bool:
        return self.set_setting_value('logging.debug', '1' if enabled else '0')

    def get_rain_config(self) -> Dict[str, Any]:
        """–ì–ª–æ–±–∞–ª—å–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–∞—Ç—á–∏–∫–∞ –¥–æ–∂–¥—è."""
        enabled = self.get_setting_value('rain.enabled')
        topic = self.get_setting_value('rain.topic') or ''
        sensor_type = self.get_setting_value('rain.type') or 'NO'
        server_id = self.get_setting_value('rain.server_id')
        return {
            'enabled': str(enabled or '0') in ('1', 'true', 'True'),
            'topic': topic,
            'type': sensor_type if sensor_type in ('NO', 'NC') else 'NO',
            'server_id': int(server_id) if server_id and str(server_id).isdigit() else None,
        }

    def set_rain_config(self, cfg: Dict[str, Any]) -> bool:
        ok = True
        ok &= self.set_setting_value('rain.enabled', '1' if cfg.get('enabled') else '0')
        if 'topic' in cfg:
            ok &= self.set_setting_value('rain.topic', cfg.get('topic') or '')
        if 'type' in cfg:
            t = cfg.get('type')
            ok &= self.set_setting_value('rain.type', t if t in ('NO', 'NC') else 'NO')
        if 'server_id' in cfg:
            sid = cfg.get('server_id')
            ok &= self.set_setting_value('rain.server_id', str(int(sid)) if sid is not None else None)
        return bool(ok)

    # ===== –î–∞—Ç—á–∏–∫–∏ —Å—Ä–µ–¥—ã (—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞/–≤–ª–∞–∂–Ω–æ—Å—Ç—å) =====
    def get_env_config(self) -> Dict[str, Any]:
        temp_enabled = self.get_setting_value('env.temp.enabled')
        temp_topic = self.get_setting_value('env.temp.topic') or ''
        temp_server_id = self.get_setting_value('env.temp.server_id')
        hum_enabled = self.get_setting_value('env.hum.enabled')
        hum_topic = self.get_setting_value('env.hum.topic') or ''
        hum_server_id = self.get_setting_value('env.hum.server_id')
        return {
            'temp': {
                'enabled': str(temp_enabled or '0') in ('1','true','True'),
                'topic': temp_topic,
                'server_id': int(temp_server_id) if temp_server_id and str(temp_server_id).isdigit() else None,
            },
            'hum': {
                'enabled': str(hum_enabled or '0') in ('1','true','True'),
                'topic': hum_topic,
                'server_id': int(hum_server_id) if hum_server_id and str(hum_server_id).isdigit() else None,
            }
        }

    def set_env_config(self, cfg: Dict[str, Any]) -> bool:
        ok = True
        temp = cfg.get('temp') or {}
        hum = cfg.get('hum') or {}
        ok &= self.set_setting_value('env.temp.enabled', '1' if temp.get('enabled') else '0')
        ok &= self.set_setting_value('env.temp.topic', temp.get('topic') or '')
        ok &= self.set_setting_value('env.temp.server_id', str(int(temp.get('server_id'))) if temp.get('server_id') is not None else None)
        ok &= self.set_setting_value('env.hum.enabled', '1' if hum.get('enabled') else '0')
        ok &= self.set_setting_value('env.hum.topic', hum.get('topic') or '')
        ok &= self.set_setting_value('env.hum.server_id', str(int(hum.get('server_id'))) if hum.get('server_id') is not None else None)
        return bool(ok)

    def get_group_use_rain(self, group_id: int) -> bool:
        try:
            with sqlite3.connect(self.db_path) as conn:
                conn.row_factory = sqlite3.Row
                cur = conn.execute('SELECT use_rain_sensor FROM groups WHERE id = ? LIMIT 1', (group_id,))
                row = cur.fetchone()
                if not row:
                    return False
                val = row['use_rain_sensor']
                return bool(int(val or 0))
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è use_rain_sensor –¥–ª—è –≥—Ä—É–ø–ø—ã {group_id}: {e}")
            return False

    def set_group_use_rain(self, group_id: int, enabled: bool) -> bool:
        try:
            with sqlite3.connect(self.db_path) as conn:
                conn.execute('UPDATE groups SET use_rain_sensor = ?, updated_at = CURRENT_TIMESTAMP WHERE id = ?', (1 if enabled else 0, group_id))
                conn.commit()
                return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ use_rain_sensor –¥–ª—è –≥—Ä—É–ø–ø—ã {group_id}: {e}")
            return False

    def clear_scheduled_for_zone_group_peers(self, zone_id: int, group_id: int) -> None:
        """–û—á–∏—Å—Ç–∏—Ç—å scheduled_start_time —É –≤—Å–µ—Ö –∑–æ–Ω –≥—Ä—É–ø–ø—ã, –∫—Ä–æ–º–µ —É–∫–∞–∑–∞–Ω–Ω–æ–π"""
        try:
            with sqlite3.connect(self.db_path) as conn:
                conn.execute('''
                    UPDATE zones
                    SET scheduled_start_time = NULL, updated_at = CURRENT_TIMESTAMP
                    WHERE group_id = ? AND id != ?
                ''', (group_id, zone_id))
                conn.commit()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è —É –æ–¥–Ω–æ–≥—Ä—É–ø–ø–Ω—ã—Ö –∑–æ–Ω –¥–ª—è –∑–æ–Ω—ã {zone_id}: {e}")

    # ===== –†–∞—Å—á–µ—Ç —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ–ª–∏–≤–∞ –∏ –ø–µ—Ä–µ—Å—Ç—Ä–æ–π–∫–∞ –æ—á–µ—Ä–µ–¥–∏ =====
    def compute_next_run_for_zone(self, zone_id: int) -> Optional[str]:
        """–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –±–ª–∏–∂–∞–π—à–µ–µ –±—É–¥—É—â–µ–µ –≤—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞ –∑–æ–Ω—ã –ø–æ –≤—Å–µ–º –ø—Ä–æ–≥—Ä–∞–º–º–∞–º.
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É '%Y-%m-%d %H:%M:%S' –∏–ª–∏ None, –µ—Å–ª–∏ –ø—Ä–æ–≥—Ä–∞–º–º –Ω–µ—Ç.
        """
        try:
            zone = self.get_zone(zone_id)
            if not zone:
                return None
            programs = self.get_programs()
            if not programs:
                return None
            now = datetime.now()
            best_dt: Optional[datetime] = None
            for prog in programs:
                if zone_id not in prog.get('zones', []):
                    continue
                # –î–ª—è –∫–∞–∂–¥–æ–≥–æ –±–ª–∏–∂–∞–π—à–µ–≥–æ –¥–Ω—è –∏–∑ —Å–ø–∏—Å–∫–∞ –¥–Ω–µ–π –Ω–∞–π–¥–µ–º –±–ª–∏–∂–∞–π—à—É—é –¥–∞—Ç—É
                for offset in range(0, 14):  # –∏—â–µ–º –Ω–∞ 2 –Ω–µ–¥–µ–ª–∏ –≤–ø–µ—Ä–µ–¥
                    dt_candidate = now + timedelta(days=offset)
                    if dt_candidate.weekday() in prog['days']:
                        hour, minute = map(int, prog['time'].split(':'))
                        start_dt = dt_candidate.replace(hour=hour, minute=minute, second=0, microsecond=0)
                        if start_dt <= now:
                            continue
                        # –°–¥–≤–∏–≥ –ø–æ –ø–æ–∑–∏—Ü–∏–∏ –∑–æ–Ω—ã –≤ –ø—Ä–æ–≥—Ä–∞–º–º–µ
                        cum = 0
                        for zid in sorted(prog['zones']):
                            dur = self.get_zone_duration(zid)
                            if zid == zone_id:
                                candidate = start_dt + timedelta(minutes=cum)
                                if best_dt is None or candidate < best_dt:
                                    best_dt = candidate
                                break
                            cum += dur
                        break
            if best_dt:
                return best_dt.strftime('%Y-%m-%d %H:%M:%S')
            return None
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø—É—Å–∫–∞ –¥–ª—è –∑–æ–Ω—ã {zone_id}: {e}")
            return None

    def reschedule_group_to_next_program(self, group_id: int) -> None:
        """–ü–µ—Ä–µ—Å—á–∏—Ç–∞—Ç—å –∏ –∑–∞–ø–∏—Å–∞—Ç—å scheduled_start_time –≤—Å–µ–º –∑–æ–Ω–∞–º –≥—Ä—É–ø–ø—ã –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ –±—É–¥—É—â–∏–µ –∑–∞–ø—É—Å–∫–∏.
        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª–∏–≤–∞ –≥—Ä—É–ø–ø—ã/–∑–∞–ø—É—Å–∫–µ –≤—Ä—É—á–Ω—É—é.
        """
        try:
            zones = self.get_zones_by_group(group_id)
            schedule: Dict[int, str] = {}
            for z in zones:
                nxt = self.compute_next_run_for_zone(z['id'])
                if nxt:
                    schedule[z['id']] = nxt
            self.clear_group_scheduled_starts(group_id)
            if schedule:
                self.set_group_scheduled_starts(group_id, schedule)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –≥—Ä—É–ø–ø—ã {group_id}: {e}")
    
    def update_group(self, group_id: int, name: str) -> bool:
        """–û–±–Ω–æ–≤–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã"""
        try:
            with sqlite3.connect(self.db_path) as conn:
                conn.execute('''
                    UPDATE groups 
                    SET name = ?, updated_at = CURRENT_TIMESTAMP
                    WHERE id = ?
                ''', (name, group_id))
                conn.commit()
                return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø—ã {group_id}: {e}")
            return False
    
    def get_programs(self) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã"""
        try:
            with sqlite3.connect(self.db_path) as conn:
                conn.row_factory = sqlite3.Row
                cursor = conn.execute('SELECT * FROM programs ORDER BY id')
                programs = []
                for row in cursor.fetchall():
                    program = dict(row)
                    program['days'] = [int(d) for d in json.loads(program['days'])]
                    program['zones'] = json.loads(program['zones'])
                    programs.append(program)
                return programs
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–∞–º–º: {e}")
            return []

    # ===== MQTT servers CRUD =====
    def get_mqtt_servers(self) -> List[Dict[str, Any]]:
        try:
            with sqlite3.connect(self.db_path) as conn:
                conn.row_factory = sqlite3.Row
                cur = conn.execute('SELECT * FROM mqtt_servers ORDER BY id')
                return [dict(row) for row in cur.fetchall()]
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è MQTT —Å–µ—Ä–≤–µ—Ä–æ–≤: {e}")
            return []

    def create_mqtt_server(self, data: Dict[str, Any]) -> Optional[Dict[str, Any]]:
        try:
            with sqlite3.connect(self.db_path) as conn:
                cur = conn.execute('''
                    INSERT INTO mqtt_servers (name, host, port, username, password, client_id, enabled)
                    VALUES (?, ?, ?, ?, ?, ?, ?)
                ''', (
                    data.get('name', 'MQTT'),
                    data.get('host', 'localhost'),
                    int(data.get('port', 1883)),
                    data.get('username'),
                    data.get('password'),
                    data.get('client_id'),
                    1 if data.get('enabled', True) else 0
                ))
                server_id = cur.lastrowid
                conn.commit()
                return self.get_mqtt_server(server_id)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è MQTT —Å–µ—Ä–≤–µ—Ä–∞: {e}")
            return None

    def get_mqtt_server(self, server_id: int) -> Optional[Dict[str, Any]]:
        try:
            with sqlite3.connect(self.db_path) as conn:
                conn.row_factory = sqlite3.Row
                cur = conn.execute('SELECT * FROM mqtt_servers WHERE id = ?', (server_id,))
                row = cur.fetchone()
                return dict(row) if row else None
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è MQTT —Å–µ—Ä–≤–µ—Ä–∞ {server_id}: {e}")
            return None

    def update_mqtt_server(self, server_id: int, data: Dict[str, Any]) -> bool:
        try:
            with sqlite3.connect(self.db_path) as conn:
                conn.execute('''
                    UPDATE mqtt_servers
                    SET name = ?, host = ?, port = ?, username = ?, password = ?, client_id = ?, enabled = ?, updated_at = CURRENT_TIMESTAMP
                    WHERE id = ?
                ''', (
                    data.get('name', 'MQTT'),
                    data.get('host', 'localhost'),
                    int(data.get('port', 1883)),
                    data.get('username'),
                    data.get('password'),
                    data.get('client_id'),
                    1 if data.get('enabled', True) else 0,
                    server_id
                ))
                conn.commit()
                return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è MQTT —Å–µ—Ä–≤–µ—Ä–∞ {server_id}: {e}")
            return False

    def delete_mqtt_server(self, server_id: int) -> bool:
        try:
            with sqlite3.connect(self.db_path) as conn:
                conn.execute('DELETE FROM mqtt_servers WHERE id = ?', (server_id,))
                conn.commit()
                return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è MQTT —Å–µ—Ä–≤–µ—Ä–∞ {server_id}: {e}")
            return False
    
    def get_logs(self, event_type: str = None, from_date: str = None, to_date: str = None) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∏—Ç—å –ª–æ–≥–∏ —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π"""
        try:
            with sqlite3.connect(self.db_path) as conn:
                conn.row_factory = sqlite3.Row
                query = 'SELECT * FROM logs WHERE 1=1'
                params = []
                
                if event_type:
                    query += ' AND type = ?'
                    params.append(event_type)
                
                if from_date:
                    query += ' AND timestamp >= ?'
                    params.append(from_date)
                
                if to_date:
                    query += ' AND timestamp <= ?'
                    params.append(f"{to_date} 23:59:59")
                
                query += ' ORDER BY timestamp DESC LIMIT 1000'
                
                cursor = conn.execute(query, params)
                return [dict(row) for row in cursor.fetchall()]
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–≥–æ–≤: {e}")
            return []
    
    def add_log(self, log_type: str, details: str = None) -> Optional[int]:
        """–î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å –≤ –ª–æ–≥"""
        try:
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.execute('''
                    INSERT INTO logs (type, details)
                    VALUES (?, ?)
                ''', (log_type, details))
                log_id = cursor.lastrowid
                conn.commit()
                return log_id
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ª–æ–≥–∞: {e}")
            return None
    
    def update_zone_postpone(self, zone_id: int, postpone_until: str = None, reason: str = None) -> bool:
        """–û–±–Ω–æ–≤–∏—Ç—å –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–π –ø–æ–ª–∏–≤ –∑–æ–Ω—ã —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –ø—Ä–∏—á–∏–Ω—ã"""
        try:
            with sqlite3.connect(self.db_path) as conn:
                conn.execute('''
                    UPDATE zones 
                    SET postpone_until = ?, postpone_reason = ?, updated_at = CURRENT_TIMESTAMP
                    WHERE id = ?
                ''', (postpone_until, reason, zone_id))
                conn.commit()
                return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–≥–æ –ø–æ–ª–∏–≤–∞ –∑–æ–Ω—ã {zone_id}: {e}")
            return False
    
    def create_backup(self) -> str:
        """–°–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        try:
            if not os.path.exists(self.backup_dir):
                os.makedirs(self.backup_dir)
            
            timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
            backup_path = os.path.join(self.backup_dir, f'irrigation_backup_{timestamp}.db')
            
            # –í —Ä–µ–∂–∏–º–µ WAL –ø—Ä—è–º–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ .db –º–æ–∂–µ—Ç –Ω–µ –≤–∫–ª—é—á–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ -wal.
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º SQLite backup API, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω—É—é –∫–æ–ø–∏—é.
            try:
                with sqlite3.connect(self.db_path) as src_conn:
                    with sqlite3.connect(backup_path) as dst_conn:
                        src_conn.backup(dst_conn)
                # –ü–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø–æ–ø—Ä–æ—Å–∏–º —á–µ–∫–ø–æ–∏–Ω—Ç (–Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ –¥–ª—è –∫–æ–ø–∏–∏, –Ω–æ —É–º–µ–Ω—å—à–∏—Ç –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã —É –∏—Å—Ö–æ–¥–Ω–æ–π –ë–î)
                try:
                    with sqlite3.connect(self.db_path) as c:
                        c.execute("PRAGMA wal_checkpoint(TRUNCATE)")
                        c.commit()
                except Exception:
                    pass
            except Exception:
                # Fallback –Ω–∞ —Ñ–∏–∑–∏—á–µ—Å–∫–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ, –µ—Å–ª–∏ backup API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
                shutil.copy2(self.db_path, backup_path)
            
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏ (–æ—Å—Ç–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7)
            self._cleanup_old_backups()
            
            logger.info(f"–†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞: {backup_path}")
            return backup_path
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏: {e}")
            return None
    
    def _cleanup_old_backups(self, keep_count: int = 7):
        """–£–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä—ã–µ —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏"""
        try:
            backup_files = []
            for file in os.listdir(self.backup_dir):
                if file.startswith('irrigation_backup_') and file.endswith('.db'):
                    file_path = os.path.join(self.backup_dir, file)
                    backup_files.append((file_path, os.path.getmtime(file_path)))
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ —Å–æ–∑–¥–∞–Ω–∏—è (–Ω–æ–≤—ã–µ –≤ –∫–æ–Ω—Ü–µ)
            backup_files.sort(key=lambda x: x[1])
            
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Ñ–∞–π–ª—ã
            for file_path, _ in backup_files[:-keep_count]:
                os.remove(file_path)
                logger.info(f"–£–¥–∞–ª–µ–Ω–∞ —Å—Ç–∞—Ä–∞—è —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: {file_path}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π: {e}")

    def create_program(self, program_data: Dict[str, Any]) -> Optional[Dict[str, Any]]:
        """–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É"""
        try:
            with sqlite3.connect(self.db_path) as conn:
                # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –¥–Ω–∏ (0-6)
                try:
                    norm_days = [int(d) for d in program_data['days']]
                except Exception:
                    norm_days = []
                # –ï—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç 1..7, —Å–º–µ—â–∞–µ–º –≤ 0..6
                if norm_days and min(norm_days) >= 1 and max(norm_days) <= 7:
                    norm_days = [max(0, min(6, d - 1)) for d in norm_days]
                cursor = conn.execute('''
                    INSERT INTO programs (name, time, days, zones)
                    VALUES (?, ?, ?, ?)
                ''', (
                    program_data['name'],
                    program_data['time'],
                    json.dumps(norm_days),
                    json.dumps(program_data['zones'])
                ))
                program_id = cursor.lastrowid
                conn.commit()
                return self.get_program(program_id)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–∞–º–º—ã: {e}")
            return None
    
    def get_program(self, program_id: int) -> Optional[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É –ø–æ ID"""
        try:
            with sqlite3.connect(self.db_path) as conn:
                conn.row_factory = sqlite3.Row
                cursor = conn.execute('SELECT * FROM programs WHERE id = ?', (program_id,))
                row = cursor.fetchone()
                if row:
                    program = dict(row)
                    program['days'] = [int(d) for d in json.loads(program['days'])]
                    program['zones'] = json.loads(program['zones'])
                    return program
                return None
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–∞–º–º—ã {program_id}: {e}")
            return None
    
    def update_program(self, program_id: int, program_data: Dict[str, Any]) -> Optional[Dict[str, Any]]:
        """–û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É"""
        try:
            with sqlite3.connect(self.db_path) as conn:
                # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –¥–Ω–∏ (0-6)
                try:
                    norm_days = [int(d) for d in program_data['days']]
                except Exception:
                    norm_days = []
                if norm_days and min(norm_days) >= 1 and max(norm_days) <= 7:
                    norm_days = [max(0, min(6, d - 1)) for d in norm_days]
                conn.execute('''
                    UPDATE programs 
                    SET name = ?, time = ?, days = ?, zones = ?, updated_at = CURRENT_TIMESTAMP
                    WHERE id = ?
                ''', (
                    program_data['name'],
                    program_data['time'],
                    json.dumps(norm_days),
                    json.dumps(program_data['zones']),
                    program_id
                ))
                conn.commit()
                return self.get_program(program_id)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–∞–º–º—ã {program_id}: {e}")
            return None
    
    def delete_program(self, program_id: int) -> bool:
        """–£–¥–∞–ª–∏—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É"""
        try:
            with sqlite3.connect(self.db_path) as conn:
                conn.execute('DELETE FROM programs WHERE id = ?', (program_id,))
                conn.commit()
                return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–∞–º–º—ã {program_id}: {e}")
            return False

    def update_zone_photo(self, zone_id: int, photo_path: Optional[str]) -> bool:
        """–û–±–Ω–æ–≤–∏—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∑–æ–Ω—ã"""
        try:
            with sqlite3.connect(self.db_path) as conn:
                conn.execute('''
                    UPDATE zones 
                    SET photo_path = ?, updated_at = CURRENT_TIMESTAMP
                    WHERE id = ?
                ''', (photo_path, zone_id))
                conn.commit()
                return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ñ–æ—Ç–æ –∑–æ–Ω—ã {zone_id}: {e}")
            return False

    def check_program_conflicts(self, program_id: int = None, time: str = None, zones: List[int] = None, days: List[str] = None) -> List[Dict[str, Any]]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–∞–º–º –ø–æ–ª–∏–≤–∞"""
        try:
            with sqlite3.connect(self.db_path) as conn:
                conn.row_factory = sqlite3.Row
                
                # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã
                query = '''
                    SELECT id, name, time, days, zones 
                    FROM programs
                '''
                
                if program_id:
                    query += ' WHERE id != ?'
                    cursor = conn.execute(query, (program_id,))
                else:
                    cursor = conn.execute(query)
                
                programs = cursor.fetchall()
                conflicts = []
                
                if not time or not zones or not days:
                    return conflicts
                
                # –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è –ø—Ä–æ–≥—Ä–∞–º–º—ã
                try:
                    program_hour, program_minute = map(int, time.split(':'))
                    program_minutes = program_hour * 60 + program_minute
                except:
                    return conflicts
                
                # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –º–∞—Å—Å–∏–≤ –¥–Ω–µ–π (–º–æ–≥—É—Ç –ø—Ä–∏–π—Ç–∏ —Å—Ç—Ä–æ–∫–∞–º–∏)
                try:
                    norm_days = [int(d) for d in days]
                except Exception:
                    norm_days = days

                # –ü–æ–ª—É—á–∞–µ–º —Å—É–º–º–∞—Ä–Ω—É—é –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ–ª–∏–≤–∞ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∑–æ–Ω
                # –ó–æ–Ω—ã –ø–æ–ª–∏–≤–∞—é—Ç—Å—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ, –ø–æ—ç—Ç–æ–º—É —Å—É–º–º–∏—Ä—É–µ–º –∏—Ö –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
                total_duration = 0
                for zone_id in zones:
                    duration = self.get_zone_duration(zone_id)
                    total_duration += duration
                
                # –í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–∞–º–º—ã
                program_end_minutes = program_minutes + total_duration
                
                for program in programs:
                    program_data = dict(program)
                    program_data['days'] = json.loads(program_data['days'])
                    program_data['zones'] = json.loads(program_data['zones'])
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ –¥–Ω–µ–π
                    common_days = set(norm_days) & set(program_data['days'])
                    if not common_days:
                        continue
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ –∑–æ–Ω
                    common_zones = set(zones) & set(program_data['zones'])
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ –≥—Ä—É–ø–ø
                    zones_groups = set()
                    existing_zones_groups = set()
                    
                    # –ü–æ–ª—É—á–∞–µ–º –≥—Ä—É–ø–ø—ã –¥–ª—è –∑–æ–Ω –Ω–æ–≤–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã
                    for zone_id in zones:
                        zone = self.get_zone(zone_id)
                        if zone:
                            zones_groups.add(zone['group_id'])
                    
                    # –ü–æ–ª—É—á–∞–µ–º –≥—Ä—É–ø–ø—ã –¥–ª—è –∑–æ–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã
                    for zone_id in program_data['zones']:
                        zone = self.get_zone(zone_id)
                        if zone:
                            existing_zones_groups.add(zone['group_id'])
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ –≥—Ä—É–ø–ø
                    common_groups = zones_groups & existing_zones_groups
                    
                    # –ö–æ–Ω—Ñ–ª–∏–∫—Ç –µ—Å—Ç—å, –µ—Å–ª–∏ –µ—Å—Ç—å –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ –ø–æ –∑–æ–Ω–∞–º –ò–õ–ò –ø–æ –≥—Ä—É–ø–ø–∞–º
                    if not common_zones and not common_groups:
                        continue
                    
                    # –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã
                    try:
                        existing_hour, existing_minute = map(int, program_data['time'].split(':'))
                        existing_minutes = existing_hour * 60 + existing_minute
                    except:
                        continue
                    
                    # –ü–æ–ª—É—á–∞–µ–º —Å—É–º–º–∞—Ä–Ω—É—é –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã
                    # –ó–æ–Ω—ã –ø–æ–ª–∏–≤–∞—é—Ç—Å—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ, –ø–æ—ç—Ç–æ–º—É —Å—É–º–º–∏—Ä—É–µ–º –∏—Ö –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
                    existing_total_duration = 0
                    for zone_id in program_data['zones']:
                        duration = self.get_zone_duration(zone_id)
                        existing_total_duration += duration
                    
                    # –í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã
                    existing_end_minutes = existing_minutes + existing_total_duration
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
                    # –ü—Ä–æ–≥—Ä–∞–º–º—ã –ø–µ—Ä–µ—Å–µ–∫–∞—é—Ç—Å—è, –µ—Å–ª–∏:
                    # 1. –ù–æ–≤–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –≤–æ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π
                    # 2. –°—É—â–µ—Å—Ç–≤—É—é—â–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –≤–æ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –Ω–æ–≤–æ–π
                    # 3. –ü—Ä–æ–≥—Ä–∞–º–º—ã –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
                    
                    if (program_minutes < existing_end_minutes and program_end_minutes > existing_minutes):
                        conflicts.append({
                            'program_id': program_data['id'],
                            'program_name': program_data['name'],
                            'program_time': program_data['time'],
                            'program_duration': existing_total_duration,
                            'common_zones': list(common_zones),
                            'common_groups': list(common_groups),
                            'common_days': list(common_days),
                            'overlap_start': max(program_minutes, existing_minutes),
                            'overlap_end': min(program_end_minutes, existing_end_minutes)
                        })
                
                return conflicts
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–∞–º–º: {e}")
            return []

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏/–ø–∞—Ä–æ–ª—å
    def get_password_hash(self) -> Optional[str]:
        try:
            with sqlite3.connect(self.db_path) as conn:
                cur = conn.execute('SELECT value FROM settings WHERE key = ? LIMIT 1', ('password_hash',))
                row = cur.fetchone()
                return row[0] if row else None
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è: {e}")
            return None

    def set_password(self, new_password: str) -> bool:
        try:
            with sqlite3.connect(self.db_path) as conn:
                conn.execute('INSERT OR REPLACE INTO settings(key, value) VALUES (?, ?)', (
                    'password_hash', generate_password_hash(new_password, method='pbkdf2:sha256')
                ))
                # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–π —Å–º–µ–Ω—ã –ø–∞—Ä–æ–ª—è
                conn.execute('INSERT OR REPLACE INTO settings(key, value) VALUES (?, ?)', (
                    'password_must_change', '0'
                ))
                conn.commit()
                return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è: {e}")
            return False

    # === Settings: early off seconds (0..15) ===
    def get_early_off_seconds(self) -> int:
        try:
            with sqlite3.connect(self.db_path) as conn:
                cur = conn.execute('SELECT value FROM settings WHERE key = ? LIMIT 1', ('early_off_seconds',))
                row = cur.fetchone()
                val = int(row[0]) if row and row[0] is not None else 3
                if val < 0: val = 0
                if val > 15: val = 15
                return val
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è early_off_seconds: {e}")
            return 3

    def set_early_off_seconds(self, seconds: int) -> bool:
        try:
            try:
                val = int(seconds)
            except Exception:
                return False
            if val < 0: val = 0
            if val > 15: val = 15
            with sqlite3.connect(self.db_path) as conn:
                conn.execute('INSERT OR REPLACE INTO settings(key, value) VALUES (?, ?)', (
                    'early_off_seconds', str(val)
                ))
                conn.commit()
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ early_off_seconds: {e}")
            return False

    def get_zone_duration(self, zone_id: int) -> int:
        """–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ–ª–∏–≤–∞ –∑–æ–Ω—ã"""
        try:
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.execute('SELECT duration FROM zones WHERE id = ?', (zone_id,))
                result = cursor.fetchone()
                return result[0] if result else 0
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∑–æ–Ω—ã {zone_id}: {e}")
            return 0

    def get_water_usage(self, days: int = 7, zone_id: int = None) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥–∞ –≤–æ–¥—ã"""
        try:
            with sqlite3.connect(self.db_path) as conn:
                conn.row_factory = sqlite3.Row
                
                if zone_id:
                    cursor = conn.execute('''
                        SELECT w.*, z.name as zone_name
                        FROM water_usage w
                        LEFT JOIN zones z ON w.zone_id = z.id
                        WHERE w.zone_id = ? AND w.timestamp >= datetime('now', '-{} days')
                        ORDER BY w.timestamp DESC
                    '''.format(days), (zone_id,))
                else:
                    cursor = conn.execute('''
                        SELECT w.*, z.name as zone_name
                        FROM water_usage w
                        LEFT JOIN zones z ON w.zone_id = z.id
                        WHERE w.timestamp >= datetime('now', '-{} days')
                        ORDER BY w.timestamp DESC
                    '''.format(days))
                
                return [dict(row) for row in cursor.fetchall()]
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Ä–∞—Å—Ö–æ–¥–∞ –≤–æ–¥—ã: {e}")
            return []

    def add_water_usage(self, zone_id: int, liters: float) -> bool:
        """–î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å –æ —Ä–∞—Å—Ö–æ–¥–µ –≤–æ–¥—ã"""
        try:
            with sqlite3.connect(self.db_path) as conn:
                conn.execute('''
                    INSERT INTO water_usage (zone_id, liters)
                    VALUES (?, ?)
                ''', (zone_id, liters))
                conn.commit()
                return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ —Ä–∞—Å—Ö–æ–¥–∞ –≤–æ–¥—ã: {e}")
            return False

    def get_water_statistics(self, days: int = 30) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–∞—Å—Ö–æ–¥–∞ –≤–æ–¥—ã"""
        try:
            with sqlite3.connect(self.db_path) as conn:
                # –û–±—â–∏–π —Ä–∞—Å—Ö–æ–¥ –∑–∞ –ø–µ—Ä–∏–æ–¥
                cursor = conn.execute('''
                    SELECT SUM(liters) as total_liters
                    FROM water_usage
                    WHERE timestamp >= datetime('now', '-{} days')
                '''.format(days))
                total_liters = cursor.fetchone()[0] or 0
                
                # –†–∞—Å—Ö–æ–¥ –ø–æ –∑–æ–Ω–∞–º
                cursor = conn.execute('''
                    SELECT z.name, SUM(w.liters) as liters
                    FROM water_usage w
                    LEFT JOIN zones z ON w.zone_id = z.id
                    WHERE w.timestamp >= datetime('now', '-{} days')
                    GROUP BY w.zone_id, z.name
                    ORDER BY liters DESC
                '''.format(days))
                zone_usage = [dict(row) for row in cursor.fetchall()]
                
                # –°—Ä–µ–¥–Ω–∏–π —Ä–∞—Å—Ö–æ–¥ –≤ –¥–µ–Ω—å
                cursor = conn.execute('''
                    SELECT AVG(daily_liters) as avg_daily
                    FROM (
                        SELECT DATE(timestamp) as date, SUM(liters) as daily_liters
                        FROM water_usage
                        WHERE timestamp >= datetime('now', '-{} days')
                        GROUP BY DATE(timestamp)
                    )
                '''.format(days))
                avg_daily = cursor.fetchone()[0] or 0
                
                return {
                    'total_liters': round(total_liters, 2),
                    'avg_daily': round(avg_daily, 2),
                    'zone_usage': zone_usage,
                    'period_days': days
                }
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤–æ–¥—ã: {e}")
            return {
                'total_liters': 0,
                'avg_daily': 0,
                'zone_usage': [],
                'period_days': days
            }

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
db = IrrigationDB()
