#!/usr/bin/env python3
"""
–†–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ —Ç–µ—Å—Ç—ã –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ WB-Irrigation
–≠–º—É–ª–∏—Ä—É–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Selenium
"""

import unittest
import time
import tempfile
import os
import shutil
import threading
import subprocess
import requests
import json
from PIL import Image
import io
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support.ui import Select
from selenium.webdriver.common.keys import Keys
import random

BASE_URL_HOST = os.environ.get('TEST_BASE_URL_HOST', 'http://localhost:8080').rstrip('/')
BASE_URL_BROWSER = os.environ.get('TEST_BASE_URL_BROWSER', os.environ.get('TEST_BASE_URL', BASE_URL_HOST)).rstrip('/')
class RealisticWebInterfaceTest(unittest.TestCase):
    """–†–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ —Ç–µ—Å—Ç—ã –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ WB-Irrigation"""
    
    @classmethod
    def setUpClass(cls):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ–¥ –≤—Å–µ–º–∏ —Ç–µ—Å—Ç–∞–º–∏"""
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        cls.test_db_path = tempfile.mktemp(suffix='.db')
        cls.test_backup_dir = tempfile.mkdtemp()
        cls.test_photos_dir = tempfile.mkdtemp()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Chrome –¥–ª—è headless —Ä–µ–∂–∏–º–∞
        chrome_options = Options()
        chrome_options.add_argument("--headless")  # –ó–∞–ø—É—Å–∫ –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
        chrome_options.add_argument("--no-sandbox")
        chrome_options.add_argument("--disable-dev-shm-usage")
        chrome_options.add_argument("--disable-gpu")
        chrome_options.add_argument("--window-size=1920,1080")
        chrome_options.add_argument("--disable-web-security")
        chrome_options.add_argument("--allow-running-insecure-content")
        
        # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —É–¥–∞–ª–µ–Ω–Ω–æ–º—É Selenium (Docker)
        try:
            remote_url = os.environ.get('SELENIUM_REMOTE_URL')
            if remote_url:
                from selenium.webdriver import Remote
                cls.driver = Remote(command_executor=remote_url, options=chrome_options)
            else:
                cls.driver = webdriver.Chrome(options=chrome_options)
            cls.driver.implicitly_wait(10)
            print("‚úÖ WebDriver –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        except Exception as e:
            print(f"‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å WebDriver: {e}")
            print("üîÑ –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ —Ä–µ–∂–∏–º –±–µ–∑ –±—Ä–∞—É–∑–µ—Ä–∞")
            cls.driver = None
        
        # –ó–∞–ø—É—Å–∫ Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        cls.app_process = None
        cls.start_flask_app()
        
        # –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        cls.wait_for_app_startup()
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        cls.create_test_image()
    
    @classmethod
    def tearDownClass(cls):
        """–û—á–∏—Å—Ç–∫–∞ –ø–æ—Å–ª–µ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
        if cls.driver:
            cls.driver.quit()
        
        if cls.app_process:
            cls.app_process.terminate()
            cls.app_process.wait()
        
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        if os.path.exists(cls.test_db_path):
            os.remove(cls.test_db_path)
        if os.path.exists(cls.test_backup_dir):
            shutil.rmtree(cls.test_backup_dir)
        if os.path.exists(cls.test_photos_dir):
            shutil.rmtree(cls.test_photos_dir)
    
    @classmethod
    def start_flask_app(cls):
        """–ó–∞–ø—É—Å–∫ Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        env = os.environ.copy()
        env['TESTING'] = '1'
        env['TEST_DB_PATH'] = cls.test_db_path
        env['TEST_BACKUP_DIR'] = cls.test_backup_dir
        env['TEST_PHOTOS_DIR'] = cls.test_photos_dir
        
        cls.app_process = subprocess.Popen(
            ['python', 'run.py'],
            env=env,
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE
        )
    
    @classmethod
    def wait_for_app_startup(cls):
        """–û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        max_attempts = 30
        for attempt in range(max_attempts):
            try:
                response = requests.get(f"{BASE_URL_HOST}/api/status", timeout=1)
                if response.status_code == 200:
                    print(f"‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ –Ω–∞ –ø–æ–ø—ã—Ç–∫–µ {attempt + 1}")
                    return
            except requests.exceptions.RequestException:
                pass
            time.sleep(1)
        raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ")
    
    @classmethod
    def create_test_image(cls):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ 100x100 –ø–∏–∫—Å–µ–ª–µ–π
        img = Image.new('RGB', (100, 100), color='red')
        img_byte_arr = io.BytesIO()
        img.save(img_byte_arr, format='JPEG')
        img_byte_arr.seek(0)
        cls.test_image_data = img_byte_arr.getvalue()
    
    def wait_and_find_element(self, by, value, timeout=10):
        """–û–∂–∏–¥–∞–Ω–∏–µ –∏ –ø–æ–∏—Å–∫ —ç–ª–µ–º–µ–Ω—Ç–∞"""
        if not self.driver:
            return None
        try:
            element = WebDriverWait(self.driver, timeout).until(
                EC.presence_of_element_located((by, value))
            )
            return element
        except:
            return None
    
    def simulate_human_delay(self, min_delay=0.5, max_delay=2.0):
        """–°–∏–º—É–ª—è—Ü–∏—è —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–π –∑–∞–¥–µ—Ä–∂–∫–∏"""
        delay = random.uniform(min_delay, max_delay)
        time.sleep(delay)
    
    def test_01_realistic_home_page_navigation(self):
        """–†–µ–∞–ª–∏—Å—Ç–∏—á–Ω–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ"""
        print("üß™ –¢–µ—Å—Ç —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ...")
        
        if not self.driver:
            print("‚ö†Ô∏è  –ü—Ä–æ–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ - –±—Ä–∞—É–∑–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return
        
        # –û—Ç–∫—Ä—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
        self.driver.get(f'{BASE_URL_BROWSER}/')
        self.simulate_human_delay()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        title = self.driver.title
        self.assertIn('WB-Irrigation', title)
        print("‚úÖ –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω")
        
        # –ò—â–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        nav_elements = self.driver.find_elements(By.TAG_NAME, 'nav')
        self.assertGreater(len(nav_elements), 0, "–ù–∞–≤–∏–≥–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        print("‚úÖ –ù–∞–≤–∏–≥–∞—Ü–∏—è –Ω–∞–π–¥–µ–Ω–∞")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–Ω–æ–ø–æ–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        buttons = self.driver.find_elements(By.TAG_NAME, 'button')
        self.assertGreater(len(buttons), 0, "–ö–Ω–æ–ø–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(buttons)} –∫–Ω–æ–ø–æ–∫")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∑–æ–Ω –ø–æ–ª–∏–≤–∞
        zone_elements = self.driver.find_elements(By.CLASS_NAME, 'zone-card')
        self.assertGreater(len(zone_elements), 0, "–ó–æ–Ω—ã –ø–æ–ª–∏–≤–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(zone_elements)} –∑–æ–Ω –ø–æ–ª–∏–≤–∞")
        
        print("‚úÖ –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    
    def test_02_realistic_zone_management(self):
        """–†–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–æ–Ω–∞–º–∏"""
        print("üß™ –¢–µ—Å—Ç —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–æ–Ω–∞–º–∏...")
        
        if not self.driver:
            print("‚ö†Ô∏è  –ü—Ä–æ–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ - –±—Ä–∞—É–∑–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∑–æ–Ω
        self.driver.get(f'{BASE_URL_BROWSER}/zones')
        self.simulate_human_delay()
        
        # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –∑–æ–Ω
        zone_cards = self.wait_and_find_element(By.CLASS_NAME, 'zone-card')
        self.assertIsNotNone(zone_cards, "–ó–æ–Ω—ã –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–∏—Å—å")
        
        # –ù–∞—Ö–æ–¥–∏–º –ø–µ—Ä–≤—É—é –∑–æ–Ω—É
        zone_cards = self.driver.find_elements(By.CLASS_NAME, 'zone-card')
        if len(zone_cards) > 0:
            first_zone = zone_cards[0]
            
            # –ù–∞—Ö–æ–¥–∏–º –∫–Ω–æ–ø–∫—É –≤–∫–ª—é—á–µ–Ω–∏—è/–≤—ã–∫–ª—é—á–µ–Ω–∏—è
            toggle_buttons = first_zone.find_elements(By.CLASS_NAME, 'toggle-btn')
            if len(toggle_buttons) > 0:
                toggle_btn = toggle_buttons[0]
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                initial_state = toggle_btn.text
                
                # –ö–ª–∏–∫–∞–µ–º –ø–æ –∫–Ω–æ–ø–∫–µ
                self.driver.execute_script("arguments[0].click();", toggle_btn)
                self.simulate_human_delay(1, 3)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
                new_state = toggle_btn.text
                self.assertNotEqual(initial_state, new_state, "–°–æ—Å—Ç–æ—è–Ω–∏–µ –∑–æ–Ω—ã –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å")
                print("‚úÖ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–æ–Ω—ã —Ä–∞–±–æ—Ç–∞–µ—Ç")
                
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                self.driver.execute_script("arguments[0].click();", toggle_btn)
                self.simulate_human_delay()
        
        print("‚úÖ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–æ–Ω–∞–º–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    
    def test_03_realistic_program_creation(self):
        """–†–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã –ø–æ–ª–∏–≤–∞"""
        print("üß™ –¢–µ—Å—Ç —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–∞–º–º—ã –ø–æ–ª–∏–≤–∞...")
        
        if not self.driver:
            print("‚ö†Ô∏è  –ü—Ä–æ–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ - –±—Ä–∞—É–∑–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø—Ä–æ–≥—Ä–∞–º–º
        self.driver.get(f'{BASE_URL_BROWSER}/programs')
        self.simulate_human_delay()
        
        # –ò—â–µ–º –∫–Ω–æ–ø–∫—É —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã
        add_buttons = self.driver.find_elements(By.CLASS_NAME, 'add-program-btn')
        if len(add_buttons) > 0:
            add_btn = add_buttons[0]
            
            # –ö–ª–∏–∫–∞–µ–º –ø–æ –∫–Ω–æ–ø–∫–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
            self.driver.execute_script("arguments[0].click();", add_btn)
            self.simulate_human_delay()
            
            # –ò—â–µ–º —Ñ–æ—Ä–º—É —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–∞–º–º—ã
            form = self.wait_and_find_element(By.CLASS_NAME, 'program-form')
            if form:
                # –ó–∞–ø–æ–ª–Ω—è–µ–º —Ñ–æ—Ä–º—É
                name_input = form.find_element(By.NAME, 'name')
                name_input.clear()
                name_input.send_keys('–¢–µ—Å—Ç–æ–≤–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞')
                self.simulate_human_delay(0.5, 1)
                
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º—è
                time_input = form.find_element(By.NAME, 'time')
                time_input.clear()
                time_input.send_keys('08:00')
                self.simulate_human_delay(0.5, 1)
                
                # –í—ã–±–∏—Ä–∞–µ–º –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏
                day_checkboxes = form.find_elements(By.NAME, 'days')
                if len(day_checkboxes) > 0:
                    day_checkboxes[0].click()  # –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫
                    self.simulate_human_delay(0.3, 0.7)
                
                # –í—ã–±–∏—Ä–∞–µ–º –∑–æ–Ω—ã
                zone_checkboxes = form.find_elements(By.NAME, 'zones')
                if len(zone_checkboxes) > 0:
                    zone_checkboxes[0].click()  # –ü–µ—Ä–≤–∞—è –∑–æ–Ω–∞
                    self.simulate_human_delay(0.3, 0.7)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–≥—Ä–∞–º–º—É
                save_btn = form.find_element(By.CLASS_NAME, 'save-btn')
                self.driver.execute_script("arguments[0].click();", save_btn)
                self.simulate_human_delay(1, 2)
                
                print("‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            else:
                print("‚ö†Ô∏è  –§–æ—Ä–º–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–∞–º–º—ã –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        else:
            print("‚ö†Ô∏è  –ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–∞–º–º—ã –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    
    def test_04_realistic_photo_upload(self):
        """–†–µ–∞–ª–∏—Å—Ç–∏—á–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏"""
        print("üß™ –¢–µ—Å—Ç —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏...")
        
        if not self.driver:
            print("‚ö†Ô∏è  –ü—Ä–æ–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ - –±—Ä–∞—É–∑–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∑–æ–Ω
        self.driver.get(f'{BASE_URL_BROWSER}/zones')
        self.simulate_human_delay()
        
        # –ù–∞—Ö–æ–¥–∏–º –ø–µ—Ä–≤—É—é –∑–æ–Ω—É
        zone_cards = self.driver.find_elements(By.CLASS_NAME, 'zone-card')
        if len(zone_cards) > 0:
            first_zone = zone_cards[0]
            
            # –ò—â–µ–º –∫–Ω–æ–ø–∫—É –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ
            photo_buttons = first_zone.find_elements(By.CLASS_NAME, 'photo-upload-btn')
            if len(photo_buttons) > 0:
                photo_btn = photo_buttons[0]
                
                # –ö–ª–∏–∫–∞–µ–º –ø–æ –∫–Ω–æ–ø–∫–µ –∑–∞–≥—Ä—É–∑–∫–∏
                self.driver.execute_script("arguments[0].click();", photo_btn)
                self.simulate_human_delay()
                
                # –ò—â–µ–º input –¥–ª—è —Ñ–∞–π–ª–∞
                file_input = self.wait_and_find_element(By.CSS_SELECTOR, 'input[type="file"]')
                if file_input:
                    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                    temp_file = tempfile.NamedTemporaryFile(suffix='.jpg', delete=False)
                    temp_file.write(self.test_image_data)
                    temp_file.close()
                    
                    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª
                    file_input.send_keys(temp_file.name)
                    self.simulate_human_delay(1, 2)
                    
                    # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                    os.unlink(temp_file.name)
                    
                    print("‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
                else:
                    print("‚ö†Ô∏è  –ü–æ–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            else:
                print("‚ö†Ô∏è  –ö–Ω–æ–ø–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    
    def test_05_realistic_log_viewing(self):
        """–†–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤"""
        print("üß™ –¢–µ—Å—Ç —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ª–æ–≥–æ–≤...")
        
        if not self.driver:
            print("‚ö†Ô∏è  –ü—Ä–æ–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ - –±—Ä–∞—É–∑–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ª–æ–≥–æ–≤
        self.driver.get(f'{BASE_URL_BROWSER}/logs')
        self.simulate_human_delay()
        
        # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –ª–æ–≥–æ–≤
        log_table = self.wait_and_find_element(By.CLASS_NAME, 'log-table')
        self.assertIsNotNone(log_table, "–¢–∞–±–ª–∏—Ü–∞ –ª–æ–≥–æ–≤ –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–∞—Å—å")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∑–∞–ø–∏—Å–µ–π
        log_rows = self.driver.find_elements(By.CLASS_NAME, 'log-row')
        self.assertGreater(len(log_rows), 0, "–õ–æ–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(log_rows)} –∑–∞–ø–∏—Å–µ–π –≤ –ª–æ–≥–∞—Ö")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
        filter_elements = self.driver.find_elements(By.CLASS_NAME, 'log-filter')
        if len(filter_elements) > 0:
            # –ö–ª–∏–∫–∞–µ–º –ø–æ –ø–µ—Ä–≤–æ–º—É —Ñ–∏–ª—å—Ç—Ä—É
            filter_elements[0].click()
            self.simulate_human_delay()
            print("‚úÖ –§–∏–ª—å—Ç—Ä—ã –ª–æ–≥–æ–≤ —Ä–∞–±–æ—Ç–∞—é—Ç")
        
        print("‚úÖ –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    
    def test_06_realistic_water_usage_monitoring(self):
        """–†–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä–∞—Å—Ö–æ–¥–∞ –≤–æ–¥—ã"""
        print("üß™ –¢–µ—Å—Ç —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ä–∞—Å—Ö–æ–¥–∞ –≤–æ–¥—ã...")
        
        if not self.driver:
            print("‚ö†Ô∏è  –ü—Ä–æ–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ - –±—Ä–∞—É–∑–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ä–∞—Å—Ö–æ–¥–∞ –≤–æ–¥—ã
        self.driver.get(f'{BASE_URL_BROWSER}/water')
        self.simulate_human_delay()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≥—Ä–∞—Ñ–∏–∫–æ–≤
        charts = self.driver.find_elements(By.CLASS_NAME, 'chart')
        self.assertGreater(len(charts), 0, "–ì—Ä–∞—Ñ–∏–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(charts)} –≥—Ä–∞—Ñ–∏–∫–æ–≤")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats_elements = self.driver.find_elements(By.CLASS_NAME, 'stat-card')
        self.assertGreater(len(stats_elements), 0, "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(stats_elements)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –ø–µ—Ä–∏–æ–¥–∞
        period_selectors = self.driver.find_elements(By.CLASS_NAME, 'period-selector')
        if len(period_selectors) > 0:
            # –ö–ª–∏–∫–∞–µ–º –ø–æ —Å–µ–ª–µ–∫—Ç–æ—Ä—É –ø–µ—Ä–∏–æ–¥–∞
            period_selectors[0].click()
            self.simulate_human_delay()
            print("‚úÖ –°–µ–ª–µ–∫—Ç–æ—Ä—ã –ø–µ—Ä–∏–æ–¥–∞ —Ä–∞–±–æ—Ç–∞—é—Ç")
        
        print("‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä–∞—Å—Ö–æ–¥–∞ –≤–æ–¥—ã —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    
    def test_07_realistic_postpone_functionality(self):
        """–†–µ–∞–ª–∏—Å—Ç–∏—á–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–≥–æ –ø–æ–ª–∏–≤–∞"""
        print("üß™ –¢–µ—Å—Ç —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–≥–æ –ø–æ–ª–∏–≤–∞...")
        
        if not self.driver:
            print("‚ö†Ô∏è  –ü—Ä–æ–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ - –±—Ä–∞—É–∑–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
        self.driver.get(f'{BASE_URL_BROWSER}/')
        self.simulate_human_delay()
        
        # –ò—â–µ–º –∫–Ω–æ–ø–∫–∏ –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–≥–æ –ø–æ–ª–∏–≤–∞
        postpone_buttons = self.driver.find_elements(By.CLASS_NAME, 'postpone-btn')
        if len(postpone_buttons) > 0:
            postpone_btn = postpone_buttons[0]
            
            # –ö–ª–∏–∫–∞–µ–º –ø–æ –∫–Ω–æ–ø–∫–µ –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–≥–æ –ø–æ–ª–∏–≤–∞
            self.driver.execute_script("arguments[0].click();", postpone_btn)
            self.simulate_human_delay()
            
            # –ò—â–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –∏–ª–∏ —Ñ–æ—Ä–º—É
            modal = self.wait_and_find_element(By.CLASS_NAME, 'postpone-modal')
            if modal:
                # –í—ã–±–∏—Ä–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π
                day_selectors = modal.find_elements(By.CLASS_NAME, 'day-selector')
                if len(day_selectors) > 0:
                    day_selectors[0].click()  # 1 –¥–µ–Ω—å
                    self.simulate_human_delay()
                
                # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–π –ø–æ–ª–∏–≤
                confirm_btn = modal.find_element(By.CLASS_NAME, 'confirm-btn')
                self.driver.execute_script("arguments[0].click();", confirm_btn)
                self.simulate_human_delay(1, 2)
                
                print("‚úÖ –§—É–Ω–∫—Ü–∏—è –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–≥–æ –ø–æ–ª–∏–≤–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            else:
                print("‚ö†Ô∏è  –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–≥–æ –ø–æ–ª–∏–≤–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        else:
            print("‚ö†Ô∏è  –ö–Ω–æ–ø–∫–∏ –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–≥–æ –ø–æ–ª–∏–≤–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
    
    def test_08_realistic_responsive_design(self):
        """–†–µ–∞–ª–∏—Å—Ç–∏—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–≥–æ –¥–∏–∑–∞–π–Ω–∞"""
        print("üß™ –¢–µ—Å—Ç —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–≥–æ –¥–∏–∑–∞–π–Ω–∞...")
        
        if not self.driver:
            print("‚ö†Ô∏è  –ü—Ä–æ–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ - –±—Ä–∞—É–∑–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã —ç–∫—Ä–∞–Ω–∞
        screen_sizes = [
            (1920, 1080),  # Desktop
            (1366, 768),   # Laptop
            (768, 1024),   # Tablet
            (375, 667)     # Mobile
        ]
        
        for width, height in screen_sizes:
            self.driver.set_window_size(width, height)
            self.simulate_human_delay()
            
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
            self.driver.get(f'{BASE_URL_BROWSER}/')
            self.simulate_human_delay()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∑–∏–ª–∞—Å—å
            title = self.driver.title
            self.assertIn('WB-Irrigation', title)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç–ª–µ–º–µ–Ω—Ç—ã –≤–∏–¥–Ω—ã
            body = self.driver.find_element(By.TAG_NAME, 'body')
            self.assertTrue(body.is_displayed())
            
            print(f"‚úÖ –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π –¥–∏–∑–∞–π–Ω —Ä–∞–±–æ—Ç–∞–µ—Ç –¥–ª—è {width}x{height}")
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º—É —Ä–∞–∑–º–µ—Ä—É
        self.driver.set_window_size(1920, 1080)
    
    def test_09_realistic_error_handling(self):
        """–†–µ–∞–ª–∏—Å—Ç–∏—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫"""
        print("üß™ –¢–µ—Å—Ç —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫...")
        
        if not self.driver:
            print("‚ö†Ô∏è  –ü—Ä–æ–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ - –±—Ä–∞—É–∑–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return
        
        # –ü—ã—Ç–∞–µ–º—Å—è –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
        self.driver.get(f'{BASE_URL_BROWSER}/nonexistent')
        self.simulate_human_delay()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ 404
        page_content = self.driver.page_source
        self.assertIn('404', page_content) or self.assertIn('Not Found', page_content)
        print("‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ 404 –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
        self.driver.get(f'{BASE_URL_BROWSER}/')
        self.simulate_human_delay()
        
        print("‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    
    def test_10_realistic_performance_testing(self):
        """–†–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        print("üß™ –¢–µ—Å—Ç —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏...")
        
        if not self.driver:
            print("‚ö†Ô∏è  –ü—Ä–æ–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ - –±—Ä–∞—É–∑–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü
        pages = ['/', '/zones', '/programs', '/logs', '/water']
        
        for page in pages:
            start_time = time.time()
            self.driver.get(f'{BASE_URL_BROWSER}{page}')
            
            # –ñ–¥–µ–º –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            WebDriverWait(self.driver, 10).until(
                lambda driver: driver.execute_script("return document.readyState") == "complete"
            )
            
            load_time = time.time() - start_time
            print(f"‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page} –∑–∞–≥—Ä—É–∑–∏–ª–∞—Å—å –∑–∞ {load_time:.2f} —Å–µ–∫—É–Ω–¥")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–∏–µ–º–ª–µ–º–æ–µ (–º–µ–Ω–µ–µ 5 —Å–µ–∫—É–Ω–¥)
            self.assertLess(load_time, 5.0, f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page} –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è —Å–ª–∏—à–∫–æ–º –º–µ–¥–ª–µ–Ω–Ω–æ")
            
            self.simulate_human_delay()
        
        print("‚úÖ –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü –ø—Ä–∏–µ–º–ª–µ–º–∞")

if __name__ == '__main__':
    print("üß™ –ó–∞–ø—É—Å–∫ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã—Ö –≤–µ–±-—Ç–µ—Å—Ç–æ–≤ WB-Irrigation...")
    print("=" * 60)
    
    # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
    unittest.main(verbosity=2, exit=False)
    
    print("=" * 60)
    print("üéâ –†–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –≤–µ–±-—Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã!")
