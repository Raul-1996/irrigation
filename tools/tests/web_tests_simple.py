#!/usr/bin/env python3
"""
–£–ø—Ä–æ—â–µ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ WB-Irrigation
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç requests –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API –±–µ–∑ –±—Ä–∞—É–∑–µ—Ä–∞
"""

import unittest
import time
import tempfile
import os
import shutil
import threading
import subprocess
import requests
import json
from PIL import Image
import io

class WebInterfaceTest(unittest.TestCase):
    """–¢–µ—Å—Ç—ã –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ WB-Irrigation"""
    
    @classmethod
    def setUpClass(cls):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ–¥ –≤—Å–µ–º–∏ —Ç–µ—Å—Ç–∞–º–∏"""
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        cls.test_db_path = tempfile.mktemp(suffix='.db')
        cls.test_backup_dir = tempfile.mkdtemp()
        cls.test_photos_dir = tempfile.mkdtemp()
        
        # –ó–∞–ø—É—Å–∫ Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        cls.app_process = None
        cls.start_flask_app()
        
        # –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        cls.wait_for_app_startup()
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        cls.create_test_image()
    
    @classmethod
    def tearDownClass(cls):
        """–û—á–∏—Å—Ç–∫–∞ –ø–æ—Å–ª–µ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
        if cls.app_process:
            cls.app_process.terminate()
            cls.app_process.wait()
        
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        if os.path.exists(cls.test_db_path):
            os.remove(cls.test_db_path)
        if os.path.exists(cls.test_backup_dir):
            shutil.rmtree(cls.test_backup_dir)
        if os.path.exists(cls.test_photos_dir):
            shutil.rmtree(cls.test_photos_dir)
    
    @classmethod
    def start_flask_app(cls):
        """–ó–∞–ø—É—Å–∫ Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        env = os.environ.copy()
        env['TESTING'] = '1'
        env['TEST_DB_PATH'] = cls.test_db_path
        env['TEST_BACKUP_DIR'] = cls.test_backup_dir
        env['TEST_PHOTOS_DIR'] = cls.test_photos_dir
        
        cls.app_process = subprocess.Popen(
            ['python', 'run.py'],
            env=env,
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE
        )
    
    @classmethod
    def wait_for_app_startup(cls):
        """–û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        max_attempts = 30
        for attempt in range(max_attempts):
            try:
                response = requests.get('http://localhost:8080/api/status', timeout=1)
                if response.status_code == 200:
                    print(f"‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ –Ω–∞ –ø–æ–ø—ã—Ç–∫–µ {attempt + 1}")
                    return
            except requests.exceptions.RequestException:
                pass
            time.sleep(1)
        raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ")
    
    @classmethod
    def create_test_image(cls):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ 100x100 –ø–∏–∫—Å–µ–ª–µ–π
        img = Image.new('RGB', (100, 100), color='red')
        img_byte_arr = io.BytesIO()
        img.save(img_byte_arr, format='JPEG')
        img_byte_arr.seek(0)
        cls.test_image_data = img_byte_arr.getvalue()
    
    def test_01_home_page(self):
        """–¢–µ—Å—Ç –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
        print("üß™ –¢–µ—Å—Ç –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã...")
        response = requests.get('http://localhost:8080/')
        self.assertEqual(response.status_code, 200)
        self.assertIn('WB-Irrigation', response.text)
        print("‚úÖ –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    
    def test_02_status_api(self):
        """–¢–µ—Å—Ç API —Å—Ç–∞—Ç—É—Å–∞"""
        print("üß™ –¢–µ—Å—Ç API —Å—Ç–∞—Ç—É—Å–∞...")
        response = requests.get('http://localhost:8080/api/status')
        self.assertEqual(response.status_code, 200)
        data = response.json()
        self.assertIn('datetime', data)
        self.assertIn('groups', data)
        print("‚úÖ API —Å—Ç–∞—Ç—É—Å–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    
    def test_03_zones_api(self):
        """–¢–µ—Å—Ç API –∑–æ–Ω"""
        print("üß™ –¢–µ—Å—Ç API –∑–æ–Ω...")
        response = requests.get('http://localhost:8080/api/zones')
        self.assertEqual(response.status_code, 200)
        zones = response.json()
        self.assertIsInstance(zones, list)
        self.assertGreater(len(zones), 0)
        print(f"‚úÖ API –∑–æ–Ω —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ, –Ω–∞–π–¥–µ–Ω–æ {len(zones)} –∑–æ–Ω")
    
    def test_04_groups_api(self):
        """–¢–µ—Å—Ç API –≥—Ä—É–ø–ø"""
        print("üß™ –¢–µ—Å—Ç API –≥—Ä—É–ø–ø...")
        response = requests.get('http://localhost:8080/api/groups')
        self.assertEqual(response.status_code, 200)
        groups = response.json()
        self.assertIsInstance(groups, list)
        self.assertGreater(len(groups), 0)
        print(f"‚úÖ API –≥—Ä—É–ø–ø —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ, –Ω–∞–π–¥–µ–Ω–æ {len(groups)} –≥—Ä—É–ø–ø")
    
    def test_05_programs_api(self):
        """–¢–µ—Å—Ç API –ø—Ä–æ–≥—Ä–∞–º–º"""
        print("üß™ –¢–µ—Å—Ç API –ø—Ä–æ–≥—Ä–∞–º–º...")
        response = requests.get('http://localhost:8080/api/programs')
        self.assertEqual(response.status_code, 200)
        programs = response.json()
        self.assertIsInstance(programs, list)
        print(f"‚úÖ API –ø—Ä–æ–≥—Ä–∞–º–º —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ, –Ω–∞–π–¥–µ–Ω–æ {len(programs)} –ø—Ä–æ–≥—Ä–∞–º–º")

    def test_05b_mqtt_servers_crud_api(self):
        """–¢–µ—Å—Ç CRUD MQTT servers —á–µ—Ä–µ–∑ API"""
        print("üß™ –¢–µ—Å—Ç API MQTT servers...")
        # create
        payload = {
            'name': 'WB UI',
            'host': '127.0.0.1',
            'port': 1883,
            'username': 'u',
            'password': 'p',
            'client_id': 'cid',
            'enabled': True
        }
        r = requests.post('http://localhost:8080/api/mqtt/servers', json=payload)
        self.assertIn(r.status_code, (201, 400))
        if r.status_code == 201:
            sid = r.json()['server']['id']
            # get
            g = requests.get(f'http://localhost:8080/api/mqtt/servers/{sid}')
            self.assertEqual(g.status_code, 200)
            # update
            u = requests.put(f'http://localhost:8080/api/mqtt/servers/{sid}', json={'name': 'WB UI 2'})
            self.assertEqual(u.status_code, 200)
            # delete
            d = requests.delete(f'http://localhost:8080/api/mqtt/servers/{sid}')
            self.assertIn(d.status_code, (204, 400))
        print("‚úÖ API MQTT servers CRUD —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    
    def test_06_logs_api(self):
        """–¢–µ—Å—Ç API –ª–æ–≥–æ–≤"""
        print("üß™ –¢–µ—Å—Ç API –ª–æ–≥–æ–≤...")
        response = requests.get('http://localhost:8080/api/logs')
        self.assertEqual(response.status_code, 200)
        logs = response.json()
        self.assertIsInstance(logs, list)
        print(f"‚úÖ API –ª–æ–≥–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ, –Ω–∞–π–¥–µ–Ω–æ {len(logs)} –∑–∞–ø–∏—Å–µ–π")
    
    def test_07_water_api(self):
        """–¢–µ—Å—Ç API –≤–æ–¥—ã"""
        print("üß™ –¢–µ—Å—Ç API –≤–æ–¥—ã...")
        response = requests.get('http://localhost:8080/api/water')
        self.assertEqual(response.status_code, 200)
        water_data = response.json()
        self.assertIsInstance(water_data, dict)
        print("‚úÖ API –≤–æ–¥—ã —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    
    def test_08_zone_update(self):
        """–¢–µ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–æ–Ω—ã"""
        print("üß™ –¢–µ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–æ–Ω—ã...")
        # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—É—é –∑–æ–Ω—É
        response = requests.get('http://localhost:8080/api/zones')
        zones = response.json()
        zone_id = zones[0]['id']
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∑–æ–Ω—É
        update_data = {
            'name': '–¢–µ—Å—Ç–æ–≤–∞—è –∑–æ–Ω–∞',
            'duration': 15,
            'icon': 'üå±'
        }
        response = requests.put(f'http://localhost:8080/api/zones/{zone_id}', 
                              json=update_data)
        self.assertEqual(response.status_code, 200)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        response = requests.get(f'http://localhost:8080/api/zones/{zone_id}')
        updated_zone = response.json()
        self.assertEqual(updated_zone['name'], '–¢–µ—Å—Ç–æ–≤–∞—è –∑–æ–Ω–∞')
        print("‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–æ–Ω—ã —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    
    def test_09_postpone_api(self):
        """–¢–µ—Å—Ç API –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–≥–æ –ø–æ–ª–∏–≤–∞"""
        print("üß™ –¢–µ—Å—Ç API –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–≥–æ –ø–æ–ª–∏–≤–∞...")
        postpone_data = {
            'group_id': 1,
            'days': 1,
            'action': 'postpone'
        }
        response = requests.post('http://localhost:8080/api/postpone', 
                               json=postpone_data)
        self.assertEqual(response.status_code, 200)
        result = response.json()
        self.assertTrue(result['success'])
        print("‚úÖ API –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–≥–æ –ø–æ–ª–∏–≤–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    
    def test_10_zone_photo_upload(self):
        """–¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∑–æ–Ω—ã"""
        print("üß™ –¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∑–æ–Ω—ã...")
        # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—É—é –∑–æ–Ω—É
        response = requests.get('http://localhost:8080/api/zones')
        zones = response.json()
        zone_id = zones[0]['id']
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é
        files = {'photo': ('test.jpg', self.test_image_data, 'image/jpeg')}
        response = requests.post(f'http://localhost:8080/api/zones/{zone_id}/photo', 
                               files=files)
        self.assertEqual(response.status_code, 200)
        result = response.json()
        self.assertTrue(result['success'])
        print("‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∑–æ–Ω—ã —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    
    def test_11_zone_photo_get(self):
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∑–æ–Ω—ã"""
        print("üß™ –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∑–æ–Ω—ã...")
        # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—É—é –∑–æ–Ω—É
        response = requests.get('http://localhost:8080/api/zones')
        zones = response.json()
        zone_id = zones[0]['id']
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
        response = requests.get(f'http://localhost:8080/api/zones/{zone_id}/photo')
        self.assertEqual(response.status_code, 200)
        result = response.json()
        self.assertTrue(result['success'])
        print("‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    
    def test_12_zone_start_stop(self):
        """–¢–µ—Å—Ç –∑–∞–ø—É—Å–∫–∞ –∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–æ–Ω—ã"""
        print("üß™ –¢–µ—Å—Ç –∑–∞–ø—É—Å–∫–∞ –∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–æ–Ω—ã...")
        # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—É—é –∑–æ–Ω—É
        response = requests.get('http://localhost:8080/api/zones')
        zones = response.json()
        zone_id = zones[0]['id']
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–æ–Ω—É
        response = requests.post(f'http://localhost:8080/api/zones/{zone_id}/start')
        self.assertEqual(response.status_code, 200)
        result = response.json()
        self.assertTrue(result['success'])
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–æ–Ω—É
        response = requests.post(f'http://localhost:8080/api/zones/{zone_id}/stop')
        self.assertEqual(response.status_code, 200)
        result = response.json()
        self.assertTrue(result['success'])
        print("‚úÖ –ó–∞–ø—É—Å–∫ –∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–æ–Ω—ã —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    
    def test_13_pages_accessibility(self):
        """–¢–µ—Å—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –≤—Å–µ—Ö —Å—Ç—Ä–∞–Ω–∏—Ü"""
        print("üß™ –¢–µ—Å—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –≤—Å–µ—Ö —Å—Ç—Ä–∞–Ω–∏—Ü...")
        pages = ['/', '/login', '/zones', '/programs', '/logs', '/water']
        
        for page in pages:
            response = requests.get(f'http://localhost:8080{page}')
            self.assertEqual(response.status_code, 200)
            self.assertIn('WB-Irrigation', response.text)
            print(f"‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page} –¥–æ—Å—Ç—É–ø–Ω–∞")

    def test_13b_login_logout(self):
        """–¢–µ—Å—Ç –ª–æ–≥–∏–Ω–∞ –∏ –ª–æ–≥–∞—É—Ç–∞"""
        # login page GET
        resp = requests.get('http://localhost:8080/login')
        self.assertEqual(resp.status_code, 200)
        # API login
        resp = requests.post('http://localhost:8080/api/login', json={'password': '1234'})
        self.assertIn(resp.status_code, (200, 401))
        # logout redirect
        resp = requests.get('http://localhost:8080/logout', allow_redirects=False)
        self.assertIn(resp.status_code, (302, 303))
    
    def test_14_error_handling(self):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫"""
        print("üß™ –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫...")
        # –¢–µ—Å—Ç –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∑–æ–Ω—ã
        response = requests.get('http://localhost:8080/api/zones/999999')
        self.assertEqual(response.status_code, 404)
        
        # –¢–µ—Å—Ç –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        response = requests.get('http://localhost:8080/nonexistent')
        self.assertEqual(response.status_code, 404)
        print("‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    
    def test_15_water_usage_page(self):
        """–¢–µ—Å—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Ä–∞—Å—Ö–æ–¥–∞ –≤–æ–¥—ã"""
        print("üß™ –¢–µ—Å—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Ä–∞—Å—Ö–æ–¥–∞ –≤–æ–¥—ã...")
        response = requests.get('http://localhost:8080/water')
        self.assertEqual(response.status_code, 200)
        self.assertIn('–†–∞—Å—Ö–æ–¥ –≤–æ–¥—ã', response.text)
        print("‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Ä–∞—Å—Ö–æ–¥–∞ –≤–æ–¥—ã —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")

if __name__ == '__main__':
    print("üß™ –ó–∞–ø—É—Å–∫ –≤–µ–±-—Ç–µ—Å—Ç–æ–≤ WB-Irrigation...")
    print("=" * 50)
    
    # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
    unittest.main(verbosity=2, exit=False)
    
    print("=" * 50)
    print("üéâ –í–µ–±-—Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã!")
