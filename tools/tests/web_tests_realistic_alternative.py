#!/usr/bin/env python3
"""
–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ —Ç–µ—Å—Ç—ã –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ WB-Irrigation
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç requests + BeautifulSoup –¥–ª—è —ç–º—É–ª—è—Ü–∏–∏ –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
"""

import unittest
import time
import tempfile
import os
import shutil
import subprocess
import requests
import json
from PIL import Image
import io
from bs4 import BeautifulSoup
import random
import re

class AlternativeRealisticWebInterfaceTest(unittest.TestCase):
    """–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ —Ç–µ—Å—Ç—ã –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ WB-Irrigation"""
    
    @classmethod
    def setUpClass(cls):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ–¥ –≤—Å–µ–º–∏ —Ç–µ—Å—Ç–∞–º–∏"""
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        cls.test_db_path = tempfile.mktemp(suffix='.db')
        cls.test_backup_dir = tempfile.mkdtemp()
        cls.test_photos_dir = tempfile.mkdtemp()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ—Å—Å–∏–∏ requests
        cls.session = requests.Session()
        cls.session.headers.update({
            'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
        })
        
        # –ó–∞–ø—É—Å–∫ Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        cls.app_process = None
        cls.start_flask_app()
        
        # –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        cls.wait_for_app_startup()
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        cls.create_test_image()
    
    @classmethod
    def tearDownClass(cls):
        """–û—á–∏—Å—Ç–∫–∞ –ø–æ—Å–ª–µ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
        if cls.app_process:
            cls.app_process.terminate()
            cls.app_process.wait()
        
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        if os.path.exists(cls.test_db_path):
            os.remove(cls.test_db_path)
        if os.path.exists(cls.test_backup_dir):
            shutil.rmtree(cls.test_backup_dir)
        if os.path.exists(cls.test_photos_dir):
            shutil.rmtree(cls.test_photos_dir)
    
    @classmethod
    def start_flask_app(cls):
        """–ó–∞–ø—É—Å–∫ Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        env = os.environ.copy()
        env['TESTING'] = '1'
        env['TEST_DB_PATH'] = cls.test_db_path
        env['TEST_BACKUP_DIR'] = cls.test_backup_dir
        env['TEST_PHOTOS_DIR'] = cls.test_photos_dir
        
        cls.app_process = subprocess.Popen(
            ['python', 'run.py'],
            env=env,
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE
        )
    
    @classmethod
    def wait_for_app_startup(cls):
        """–û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        max_attempts = 30
        for attempt in range(max_attempts):
            try:
                response = cls.session.get('http://localhost:8080/api/status', timeout=1)
                if response.status_code == 200:
                    print(f"‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ –Ω–∞ –ø–æ–ø—ã—Ç–∫–µ {attempt + 1}")
                    return
            except requests.exceptions.RequestException:
                pass
            time.sleep(1)
        raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ")
    
    @classmethod
    def create_test_image(cls):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ 100x100 –ø–∏–∫—Å–µ–ª–µ–π
        img = Image.new('RGB', (100, 100), color='red')
        img_byte_arr = io.BytesIO()
        img.save(img_byte_arr, format='JPEG')
        img_byte_arr.seek(0)
        cls.test_image_data = img_byte_arr.getvalue()
    
    def simulate_human_delay(self, min_delay=0.5, max_delay=2.0):
        """–°–∏–º—É–ª—è—Ü–∏—è —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–π –∑–∞–¥–µ—Ä–∂–∫–∏"""
        delay = random.uniform(min_delay, max_delay)
        time.sleep(delay)
    
    def get_page_content(self, url):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
        try:
            response = self.session.get(f'http://localhost:8080{url}')
            response.raise_for_status()
            return response.text, response.status_code
        except requests.exceptions.RequestException as e:
            return str(e), 500
    
    def parse_html(self, html_content):
        """–ü–∞—Ä—Å–∏–Ω–≥ HTML –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
        return BeautifulSoup(html_content, 'html.parser')
    
    def test_01_realistic_home_page_navigation(self):
        """–†–µ–∞–ª–∏—Å—Ç–∏—á–Ω–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ"""
        print("üß™ –¢–µ—Å—Ç —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ...")
        
        # –ü–æ–ª—É—á–∞–µ–º –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
        html_content, status_code = self.get_page_content('/')
        self.assertEqual(status_code, 200, "–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
        
        # –ü–∞—Ä—Å–∏–º HTML
        soup = self.parse_html(html_content)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        title = soup.find('title')
        self.assertIsNotNone(title, "–ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –Ω–µ –Ω–∞–π–¥–µ–Ω")
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å–æ–¥–µ—Ä–∂–∏—Ç –æ–∂–∏–¥–∞–µ–º—ã–π —Ç–µ–∫—Å—Ç
        title_text = title.text.lower()
        self.assertTrue('—Å—Ç–∞—Ç—É—Å' in title_text or 'wb-irrigation' in title_text, f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫: {title.text}")
        print("‚úÖ –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω")
        
        # –ò—â–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        nav_elements = soup.find_all('nav')
        self.assertGreater(len(nav_elements), 0, "–ù–∞–≤–∏–≥–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        print("‚úÖ –ù–∞–≤–∏–≥–∞—Ü–∏—è –Ω–∞–π–¥–µ–Ω–∞")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–Ω–æ–ø–æ–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        buttons = soup.find_all('button')
        self.assertGreater(len(buttons), 0, "–ö–Ω–æ–ø–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(buttons)} –∫–Ω–æ–ø–æ–∫")
        
        print("‚úÖ –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    
    def test_02_realistic_api_interaction(self):
        """–†–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å API"""
        print("üß™ –¢–µ—Å—Ç —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–≥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å API...")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º API —Å—Ç–∞—Ç—É—Å–∞
        response = self.session.get('http://localhost:8080/api/status')
        self.assertEqual(response.status_code, 200, "API —Å—Ç–∞—Ç—É—Å–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        status_data = response.json()
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–∂–∏–¥–∞–µ–º—ã–µ –ø–æ–ª—è
        expected_fields = ['datetime', 'groups', 'humidity', 'rain_sensor', 'temperature']
        for field in expected_fields:
            self.assertIn(field, status_data, f"–ü–æ–ª–µ {field} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ API —Å—Ç–∞—Ç—É—Å–∞")
        print("‚úÖ API —Å—Ç–∞—Ç—É—Å–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º API –∑–æ–Ω
        response = self.session.get('http://localhost:8080/api/zones')
        self.assertEqual(response.status_code, 200, "API –∑–æ–Ω –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        zones_data = response.json()
        self.assertIsInstance(zones_data, list)
        print(f"‚úÖ API –∑–æ–Ω —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø–æ–ª—É—á–µ–Ω–æ {len(zones_data)} –∑–æ–Ω")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º API –≥—Ä—É–ø–ø
        response = self.session.get('http://localhost:8080/api/groups')
        self.assertEqual(response.status_code, 200, "API –≥—Ä—É–ø–ø –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        groups_data = response.json()
        self.assertIsInstance(groups_data, list)
        print(f"‚úÖ API –≥—Ä—É–ø–ø —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø–æ–ª—É—á–µ–Ω–æ {len(groups_data)} –≥—Ä—É–ø–ø")
        
        print("‚úÖ –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å API —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    
    def test_03_realistic_performance_testing(self):
        """–†–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        print("üß™ –¢–µ—Å—Ç —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏...")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü
        pages = ['/', '/zones', '/programs', '/logs', '/water']
        
        for page in pages:
            start_time = time.time()
            html_content, status_code = self.get_page_content(page)
            load_time = time.time() - start_time
            
            self.assertEqual(status_code, 200, f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page} –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
            self.assertLess(load_time, 5.0, f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page} –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è —Å–ª–∏—à–∫–æ–º –º–µ–¥–ª–µ–Ω–Ω–æ")
            print(f"‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page} –∑–∞–≥—Ä—É–∑–∏–ª–∞—Å—å –∑–∞ {load_time:.2f} —Å–µ–∫—É–Ω–¥")
            
            self.simulate_human_delay(0.5, 1.0)
        
        print("‚úÖ –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü –ø—Ä–∏–µ–º–ª–µ–º–∞")

if __name__ == '__main__':
    print("üß™ –ó–∞–ø—É—Å–∫ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã—Ö —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã—Ö –≤–µ–±-—Ç–µ—Å—Ç–æ–≤ WB-Irrigation...")
    print("=" * 60)
    
    # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
    unittest.main(verbosity=2, exit=False)
    
    print("=" * 60)
    print("üéâ –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –≤–µ–±-—Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã!")
