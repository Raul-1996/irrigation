import unittest
import json
import tempfile
import os
import shutil
from datetime import datetime, timedelta
import sys, os
# Ensure project root on path
_HERE = os.path.abspath(os.path.dirname(__file__))
_ROOT = os.path.abspath(os.path.join(_HERE, os.pardir, os.pardir))
if _ROOT not in sys.path:
    sys.path.insert(0, _ROOT)

from database import IrrigationDB
from app import app

class TestIrrigationSystem(unittest.TestCase):
    
    def setUp(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ–¥ —Ç–µ—Å—Ç–∞–º–∏"""
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ—Å—Ç–æ–≤
        self.test_db_path = tempfile.mktemp(suffix='.db')
        self.test_backup_dir = tempfile.mkdtemp()
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        self.db = IrrigationDB()
        self.db.db_path = self.test_db_path
        self.db.backup_dir = self.test_backup_dir
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        self.db.init_database()
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π Flask app
        app.config['TESTING'] = True
        app.config['EMERGENCY_STOP'] = False
        self.client = app.test_client()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é –ë–î –∏ –∑–∞–º–µ–Ω—è–µ–º –Ω–∞ —Ç–µ—Å—Ç–æ–≤—É—é
        self.original_db = app.db
        app.db = self.db
        
        # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ Flask app –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Ç–µ—Å—Ç–æ–≤—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        import database
        database.db = self.db
        
        # –¢–∞–∫–∂–µ –∑–∞–º–µ–Ω—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é db –≤ app.py
        import app as app_module
        app_module.db = self.db
        # –ï—Å–ª–∏ –±–∞–∑–∞ –ø—É—Å—Ç–∞—è, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ (–∫–∞–∫ –≤ pytest-–Ω–∞–±–æ—Ä–µ)
        try:
            if not (self.db.get_zones() or []):
                # 30 –∑–æ–Ω –≤ –≥—Ä—É–ø–ø–µ 1 —Å –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é 1 –º–∏–Ω—É—Ç–∞
                for zid in range(1, 31):
                    self.db.create_zone({
                        'id': zid,
                        'name': f'–ó–æ–Ω–∞ {zid}',
                        'icon': 'üåø',
                        'duration': 1,
                        'group': 1,
                        'group_id': 1
                    })
                # –î–≤–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã —Å–æ –≤—Å–µ–º–∏ –∑–æ–Ω–∞–º–∏, –¥–Ω–∏ 0-6
                all_z = list(range(1, 31))
                self.db.create_program({'name': '–£—Ç—Ä–µ–Ω–Ω–∏–π', 'time': '04:00', 'days': [0,1,2,3,4,5,6], 'zones': all_z})
                self.db.create_program({'name': '–í–µ—á–µ—Ä–Ω–∏–π', 'time': '20:00', 'days': [0,1,2,3,4,5,6], 'zones': all_z})
        except Exception:
            pass
        # –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º, —á—Ç–æ –≤ —Ç–µ—Å—Ç–æ–≤–æ–π –ë–î –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–æ–Ω
        for z in self.db.get_zones() or []:
            try:
                self.db.update_zone(z['id'], {'state': 'off', 'watering_start_time': None})
            except Exception:
                pass
    
    def tearDown(self):
        """–û—á–∏—Å—Ç–∫–∞ –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–æ–≤"""
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é –ë–î
        app.db = self.original_db
        
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        if os.path.exists(self.test_db_path):
            os.remove(self.test_db_path)
        if os.path.exists(self.test_backup_dir):
            shutil.rmtree(self.test_backup_dir)
    
    def test_database_initialization(self):
        """–¢–µ—Å—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã
        zones = self.db.get_zones()
        groups = self.db.get_groups()
        programs = self.db.get_programs()
        
        self.assertIsInstance(zones, list)
        self.assertIsInstance(groups, list)
        self.assertIsInstance(programs, list)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã
        self.assertGreater(len(zones), 0)
        self.assertGreater(len(groups), 0)
        self.assertGreater(len(programs), 0)
    
    def test_zone_operations(self):
        """–¢–µ—Å—Ç –æ–ø–µ—Ä–∞—Ü–∏–π —Å –∑–æ–Ω–∞–º–∏"""
        # –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∑–æ–Ω—ã
        zone_data = {
            'name': '–¢–µ—Å—Ç–æ–≤–∞—è –∑–æ–Ω–∞',
            'icon': 'üåø',
            'duration': 15,
            'group': 1
        }
        
        new_zone = self.db.create_zone(zone_data)
        self.assertIsNotNone(new_zone)
        self.assertEqual(new_zone['name'], '–¢–µ—Å—Ç–æ–≤–∞—è –∑–æ–Ω–∞')
        self.assertEqual(new_zone['duration'], 15)
        
        # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∑–æ–Ω—ã
        zone = self.db.get_zone(new_zone['id'])
        self.assertIsNotNone(zone)
        self.assertEqual(zone['name'], '–¢–µ—Å—Ç–æ–≤–∞—è –∑–æ–Ω–∞')
        
        # –¢–µ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–æ–Ω—ã
        update_data = {
            'name': '–û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –∑–æ–Ω–∞',
            'icon': 'üå≥',
            'duration': 20,
            'group': 1
        }
        updated_zone = self.db.update_zone(new_zone['id'], update_data)
        self.assertIsNotNone(updated_zone)
        self.assertEqual(updated_zone['name'], '–û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –∑–æ–Ω–∞')
        self.assertEqual(updated_zone['duration'], 20)
        
        # –¢–µ—Å—Ç —É–¥–∞–ª–µ–Ω–∏—è –∑–æ–Ω—ã
        success = self.db.delete_zone(new_zone['id'])
        self.assertTrue(success)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–æ–Ω–∞ —É–¥–∞–ª–µ–Ω–∞
        deleted_zone = self.db.get_zone(new_zone['id'])
        self.assertIsNone(deleted_zone)
    
    def test_group_operations(self):
        """–¢–µ—Å—Ç –æ–ø–µ—Ä–∞—Ü–∏–π —Å –≥—Ä—É–ø–ø–∞–º–∏"""
        # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –≥—Ä—É–ø–ø
        groups = self.db.get_groups()
        self.assertGreater(len(groups), 0)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –≥—Ä—É–ø–ø—ã
        group = groups[0]
        self.assertIn('id', group)
        self.assertIn('name', group)
        self.assertIn('zone_count', group)
        
        # –¢–µ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø—ã
        original_name = group['name']
        new_name = '–û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –≥—Ä—É–ø–ø–∞'
        
        success = self.db.update_group(group['id'], new_name)
        self.assertTrue(success)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        updated_groups = self.db.get_groups()
        updated_group = next((g for g in updated_groups if g['id'] == group['id']), None)
        self.assertIsNotNone(updated_group)
        self.assertEqual(updated_group['name'], new_name)
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–º—è
        self.db.update_group(group['id'], original_name)
    
    def test_program_operations(self):
        """–¢–µ—Å—Ç –æ–ø–µ—Ä–∞—Ü–∏–π —Å –ø—Ä–æ–≥—Ä–∞–º–º–∞–º–∏"""
        programs = self.db.get_programs()
        self.assertGreater(len(programs), 0)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–æ–≥—Ä–∞–º–º—ã
        program = programs[0]
        self.assertIn('id', program)
        self.assertIn('name', program)
        self.assertIn('time', program)
        self.assertIn('days', program)
        self.assertIn('zones', program)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ days –∏ zones - —ç—Ç–æ —Å–ø–∏—Å–∫–∏
        self.assertIsInstance(program['days'], list)
        self.assertIsInstance(program['zones'], list)
    
    def test_log_operations(self):
        """–¢–µ—Å—Ç –æ–ø–µ—Ä–∞—Ü–∏–π —Å –ª–æ–≥–∞–º–∏"""
        # –¢–µ—Å—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ª–æ–≥–∞
        log_data = {
            'type': 'test_log',
            'details': json.dumps({"test": "data"})
        }
        
        log_id = self.db.add_log(log_data['type'], log_data['details'])
        self.assertIsNotNone(log_id)
        
        # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–≥–æ–≤
        logs = self.db.get_logs()
        self.assertIsInstance(logs, list)
        self.assertGreater(len(logs), 0)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ª–æ–≥–∞
        log = logs[0]
        self.assertIn('id', log)
        self.assertIn('type', log)
        self.assertIn('details', log)
        self.assertIn('timestamp', log)  # –ò–∑–º–µ–Ω–µ–Ω–æ —Å 'time' –Ω–∞ 'timestamp'
        
        # –¢–µ—Å—Ç —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ª–æ–≥–æ–≤
        filtered_logs = self.db.get_logs(event_type='test_log')
        self.assertIsInstance(filtered_logs, list)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –ª–æ–≥–∏ –∏–º–µ—é—Ç –Ω—É–∂–Ω—ã–π —Ç–∏–ø
        for log in filtered_logs:
            self.assertEqual(log['type'], 'test_log')
    
    def test_postpone_operations(self):
        """–¢–µ—Å—Ç –æ–ø–µ—Ä–∞—Ü–∏–π –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–≥–æ –ø–æ–ª–∏–≤–∞"""
        # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—É—é –∑–æ–Ω—É
        zones = self.db.get_zones()
        self.assertGreater(len(zones), 0)
        zone = zones[0]
        
        # –¢–µ—Å—Ç —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–≥–æ –ø–æ–ª–∏–≤–∞
        postpone_date = (datetime.now() + timedelta(days=2)).strftime('%Y-%m-%d 23:59')
        success = self.db.update_zone_postpone(zone['id'], postpone_date)
        self.assertTrue(success)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–π –ø–æ–ª–∏–≤ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
        updated_zone = self.db.get_zone(zone['id'])
        self.assertEqual(updated_zone['postpone_until'], postpone_date)
        
        # –¢–µ—Å—Ç –æ—Ç–º–µ–Ω—ã –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–≥–æ –ø–æ–ª–∏–≤–∞
        success = self.db.update_zone_postpone(zone['id'], None)
        self.assertTrue(success)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–π –ø–æ–ª–∏–≤ –æ—Ç–º–µ–Ω–µ–Ω
        updated_zone = self.db.get_zone(zone['id'])
        self.assertIsNone(updated_zone['postpone_until'])
    
    def test_backup_operations(self):
        """–¢–µ—Å—Ç –æ–ø–µ—Ä–∞—Ü–∏–π —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è"""
        # –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
        backup_path = self.db.create_backup()
        self.assertIsNotNone(backup_path)
        self.assertTrue(os.path.exists(backup_path))
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞
        backup_files = os.listdir(self.test_backup_dir)
        self.assertGreater(len(backup_files), 0)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∞–Ω–Ω—ã–µ
        backup_size = os.path.getsize(backup_path)
        self.assertGreater(backup_size, 0)
    
    def test_api_endpoints(self):
        """–¢–µ—Å—Ç API —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤"""
        # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∑–æ–Ω
        response = self.client.get('/api/zones')
        self.assertEqual(response.status_code, 200)
        zones = json.loads(response.data)
        self.assertIsInstance(zones, list)
        self.assertGreater(len(zones), 0)
        
        # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –≥—Ä—É–ø–ø
        response = self.client.get('/api/groups')
        self.assertEqual(response.status_code, 200)
        groups = json.loads(response.data)
        self.assertIsInstance(groups, list)
        self.assertGreater(len(groups), 0)
        
        # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–∞–º–º
        response = self.client.get('/api/programs')
        self.assertEqual(response.status_code, 200)
        programs = json.loads(response.data)
        self.assertIsInstance(programs, list)
        self.assertGreater(len(programs), 0)
        
        # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
        response = self.client.get('/api/status')
        self.assertEqual(response.status_code, 200)
        status = json.loads(response.data)
        self.assertIn('datetime', status)
        self.assertIn('groups', status)
        self.assertIsInstance(status['groups'], list)
        
        # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–≥–æ–≤
        response = self.client.get('/api/logs')
        self.assertEqual(response.status_code, 200)
        logs = json.loads(response.data)
        self.assertIsInstance(logs, list)

        # –¢–µ—Å—Ç –∫–∞—Ä—Ç—ã –∑–æ–Ω API
        resp = self.client.get('/api/map')
        self.assertEqual(resp.status_code, 200)
        data = json.loads(resp.data)
        self.assertIn('success', data)

        # –ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Ä—Ç—ã (–∑–∞–≥–ª—É—à–∫–∞ –±–∞–π—Ç–æ–≤)
        from io import BytesIO
        fake = BytesIO(b'fake_image')
        fake.name = 'map.png'
        resp = self.client.post('/api/map', data={'file': (fake, 'map.png')}, content_type='multipart/form-data')
        self.assertEqual(resp.status_code, 200)
        data = json.loads(resp.data)
        self.assertTrue(data['success'])
        self.assertIn('path', data)
    
    def test_api_zone_crud(self):
        """–¢–µ—Å—Ç CRUD –æ–ø–µ—Ä–∞—Ü–∏–π —Å –∑–æ–Ω–∞–º–∏ —á–µ—Ä–µ–∑ API"""
        # –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∑–æ–Ω—ã
        zone_data = {
            'name': 'API –¢–µ—Å—Ç–æ–≤–∞—è –∑–æ–Ω–∞',
            'icon': 'üå≥',
            'duration': 25,
            'group': 1
        }
        
        response = self.client.post('/api/zones', 
                                  data=json.dumps(zone_data),
                                  content_type='application/json')
        self.assertEqual(response.status_code, 201)
        
        new_zone = json.loads(response.data)
        zone_id = new_zone['id']
        
        # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∑–æ–Ω—ã
        response = self.client.get(f'/api/zones/{zone_id}')
        self.assertEqual(response.status_code, 200)
        
        # –¢–µ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–æ–Ω—ã
        update_data = {
            'name': 'API –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –∑–æ–Ω–∞',
            'icon': 'üå∫',
            'duration': 30,
            'group': 1
        }
        
        response = self.client.put(f'/api/zones/{zone_id}',
                                 data=json.dumps(update_data),
                                 content_type='application/json')
        self.assertEqual(response.status_code, 200)
        
        updated_zone = json.loads(response.data)
        self.assertEqual(updated_zone['name'], 'API –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –∑–æ–Ω–∞')
        self.assertEqual(updated_zone['duration'], 30)
        
        # –¢–µ—Å—Ç —É–¥–∞–ª–µ–Ω–∏—è –∑–æ–Ω—ã
        response = self.client.delete(f'/api/zones/{zone_id}')
        self.assertEqual(response.status_code, 204)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–æ–Ω–∞ —É–¥–∞–ª–µ–Ω–∞
        response = self.client.get(f'/api/zones/{zone_id}')
        self.assertEqual(response.status_code, 404)
    
    def test_api_postpone(self):
        """–¢–µ—Å—Ç API –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–≥–æ –ø–æ–ª–∏–≤–∞"""
        # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—É—é –≥—Ä—É–ø–ø—É
        response = self.client.get('/api/groups')
        groups = json.loads(response.data)
        self.assertGreater(len(groups), 0)
        group_id = groups[0]['id']
        
        # –¢–µ—Å—Ç –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–≥–æ –ø–æ–ª–∏–≤–∞
        postpone_data = {
            'group_id': group_id,
            'days': 3,
            'action': 'postpone'
        }
        
        response = self.client.post('/api/postpone',
                                  data=json.dumps(postpone_data),
                                  content_type='application/json')
        self.assertEqual(response.status_code, 200)
        
        result = json.loads(response.data)
        self.assertTrue(result['success'])
        self.assertIn('–ü–æ–ª–∏–≤ –æ—Ç–ª–æ–∂–µ–Ω –Ω–∞ 3 –¥–Ω–µ–π', result['message'])
        
        # –¢–µ—Å—Ç –æ—Ç–º–µ–Ω—ã –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–≥–æ –ø–æ–ª–∏–≤–∞
        cancel_data = {
            'group_id': group_id,
            'action': 'cancel'
        }
        
        response = self.client.post('/api/postpone',
                                  data=json.dumps(cancel_data),
                                  content_type='application/json')
        self.assertEqual(response.status_code, 200)
        
        result = json.loads(response.data)
        self.assertTrue(result['success'])
        self.assertIn('–û—Ç–ª–æ–∂–µ–Ω–Ω—ã–π –ø–æ–ª–∏–≤ –æ—Ç–º–µ–Ω–µ–Ω', result['message'])
    
    def test_api_backup(self):
        """–¢–µ—Å—Ç API —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è"""
        response = self.client.post('/api/backup')
        self.assertEqual(response.status_code, 200)
        
        result = json.loads(response.data)
        self.assertTrue(result['success'])
        self.assertIn('–†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞', result['message'])
        self.assertIn('backup_path', result)
    
    def test_data_integrity(self):
        """–¢–µ—Å—Ç —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –∑–æ–Ω—ã –∏–º–µ—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –≥—Ä—É–ø–ø—ã
        zones = self.db.get_zones()
        groups = self.db.get_groups()
        group_ids = {g['id'] for g in groups}
        
        for zone in zones:
            self.assertIn(zone['group_id'], group_ids, 
                         f"–ó–æ–Ω–∞ {zone['id']} —Å—Å—ã–ª–∞–µ—Ç—Å—è –Ω–∞ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –≥—Ä—É–ø–ø—É {zone['group_id']}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã –∏–º–µ—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –∑–æ–Ω—ã
        programs = self.db.get_programs()
        zone_ids = {z['id'] for z in zones}
        
        for program in programs:
            for zone_id in program['zones']:
                self.assertIn(zone_id, zone_ids,
                             f"–ü—Ä–æ–≥—Ä–∞–º–º–∞ {program['id']} —Å—Å—ã–ª–∞–µ—Ç—Å—è –Ω–∞ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–æ–Ω—É {zone_id}")
    
    def test_error_handling(self):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫"""
        # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∑–æ–Ω—ã
        response = self.client.get('/api/zones/99999')
        self.assertEqual(response.status_code, 404)
        
        # –¢–µ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∑–æ–Ω—ã
        response = self.client.put('/api/zones/99999',
                                 data=json.dumps({'name': 'test', 'icon': 'üåø', 'duration': 10, 'group': 1}),
                                 content_type='application/json')
        self.assertEqual(response.status_code, 404)
        
        # –¢–µ—Å—Ç —É–¥–∞–ª–µ–Ω–∏—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∑–æ–Ω—ã (DELETE –∏–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–µ–Ω, –ø–æ—ç—Ç–æ–º—É 204)
        response = self.client.delete('/api/zones/99999')
        self.assertEqual(response.status_code, 204)
        
        # –¢–µ—Å—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ JSON
        response = self.client.post('/api/zones',
                                  data='invalid json',
                                  content_type='application/json')
        self.assertEqual(response.status_code, 400)

    def test_zone_start_stop(self):
        """–¢–µ—Å—Ç –∑–∞–ø—É—Å–∫–∞ –∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–æ–Ω"""
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∑–æ–Ω—É
        zone_data = {
            'name': '–¢–µ—Å—Ç–æ–≤–∞—è –∑–æ–Ω–∞',
            'icon': 'üåø',
            'duration': 10,
            'group_id': 1
        }
        zone = self.db.create_zone(zone_data)
        self.assertIsNotNone(zone)
        zone_id = zone['id']

        # –¢–µ—Å—Ç –∑–∞–ø—É—Å–∫–∞ –∑–æ–Ω—ã
        response = self.client.post(f'/api/zones/{zone_id}/start')
        self.assertEqual(response.status_code, 200)
        data = json.loads(response.data)
        self.assertTrue(data['success'])
        self.assertEqual(data['state'], 'on')

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç–∞—Ç—É—Å –∑–æ–Ω—ã –∏–∑–º–µ–Ω–∏–ª—Å—è
        updated_zone = self.db.get_zone(zone_id)
        self.assertEqual(updated_zone['state'], 'on')

        # –¢–µ—Å—Ç –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–æ–Ω—ã
        response = self.client.post(f'/api/zones/{zone_id}/stop')
        self.assertEqual(response.status_code, 200)
        data = json.loads(response.data)
        self.assertTrue(data['success'])
        self.assertEqual(data['state'], 'off')

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç–∞—Ç—É—Å –∑–æ–Ω—ã –∏–∑–º–µ–Ω–∏–ª—Å—è
        updated_zone = self.db.get_zone(zone_id)
        self.assertEqual(updated_zone['state'], 'off')

        # –ê–≤–∞—Ä–∏–π–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–ª–æ–∫–∏—Ä—É–µ—Ç –∑–∞–ø—É—Å–∫
        r = self.client.post('/api/emergency-stop')
        self.assertEqual(r.status_code, 200)
        r = self.client.post(f'/api/zones/{zone_id}/start')
        self.assertEqual(r.status_code, 400)
        r = self.client.post('/api/emergency-resume')
        self.assertEqual(r.status_code, 200)

    def test_zone_photo_operations(self):
        """–¢–µ—Å—Ç –æ–ø–µ—Ä–∞—Ü–∏–π —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏ –∑–æ–Ω"""
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∑–æ–Ω—É
        zone_data = {
            'name': '–ó–æ–Ω–∞ —Å —Ñ–æ—Ç–æ',
            'icon': 'üåø',
            'duration': 10,
            'group_id': 1
        }
        zone = self.db.create_zone(zone_data)
        self.assertIsNotNone(zone)
        zone_id = zone['id']

        # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–æ—Ç–æ (–∏–∑–Ω–∞—á–∞–ª—å–Ω–æ –Ω–µ—Ç)
        response = self.client.get(f'/api/zones/{zone_id}/photo')
        self.assertEqual(response.status_code, 200)
        data = json.loads(response.data)
        self.assertTrue(data['success'])
        self.assertFalse(data['has_photo'])

        # –¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ (–º–æ–∫–∞–µ–º —Ñ–∞–π–ª)
        from io import BytesIO
        test_image = BytesIO(b'fake_image_data')
        test_image.name = 'test.jpg'
        
        response = self.client.post(
            f'/api/zones/{zone_id}/photo',
            data={'photo': (test_image, 'test.jpg')},
            content_type='multipart/form-data'
        )
        self.assertEqual(response.status_code, 200)
        data = json.loads(response.data)
        self.assertTrue(data['success'])

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–æ—Ç–æ —Å–æ—Ö—Ä–∞–Ω–∏–ª–æ—Å—å
        updated_zone = self.db.get_zone(zone_id)
        self.assertIsNotNone(updated_zone['photo_path'])

        # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–æ—Ç–æ (—Ç–µ–ø–µ—Ä—å –µ—Å—Ç—å)
        response = self.client.get(f'/api/zones/{zone_id}/photo')
        self.assertEqual(response.status_code, 200)
        data = json.loads(response.data)
        self.assertTrue(data['success'])
        self.assertTrue(data['has_photo'])

        # –¢–µ—Å—Ç —É–¥–∞–ª–µ–Ω–∏—è —Ñ–æ—Ç–æ
        response = self.client.delete(f'/api/zones/{zone_id}/photo')
        self.assertEqual(response.status_code, 200)
        data = json.loads(response.data)
        self.assertTrue(data['success'])

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–æ—Ç–æ —É–¥–∞–ª–∏–ª–æ—Å—å
        updated_zone = self.db.get_zone(zone_id)
        self.assertIsNone(updated_zone['photo_path'])

    def test_bulk_operations(self):
        """–¢–µ—Å—Ç –º–∞—Å—Å–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π"""
        # –°–æ–∑–¥–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–æ–Ω
        zones_data = [
            {'name': '–ó–æ–Ω–∞ 1', 'icon': 'üåø', 'duration': 10, 'group_id': 1},
            {'name': '–ó–æ–Ω–∞ 2', 'icon': 'üå≥', 'duration': 15, 'group_id': 1},
            {'name': '–ó–æ–Ω–∞ 3', 'icon': 'üå∫', 'duration': 20, 'group_id': 2}
        ]
        
        created_zones = []
        for zone_data in zones_data:
            zone = self.db.create_zone(zone_data)
            created_zones.append(zone)

        # –¢–µ—Å—Ç –º–∞—Å—Å–æ–≤–æ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≥—Ä—É–ø–ø—ã (—á–µ—Ä–µ–∑ API)
        for zone in created_zones:
            response = self.client.put(f'/api/zones/{zone["id"]}', json={'group_id': 2})
            self.assertEqual(response.status_code, 200)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≥—Ä—É–ø–ø—ã –∏–∑–º–µ–Ω–∏–ª–∏—Å—å
        for zone in created_zones:
            updated_zone = self.db.get_zone(zone['id'])
            self.assertEqual(updated_zone['group_id'], 2)

    def test_group_exclusion(self):
        """–¢–µ—Å—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏—è –≥—Ä—É–ø–ø—ã '–ë–ï–ó –ü–û–õ–ò–í–ê' –∏–∑ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        # –°–æ–∑–¥–∞–µ–º –∑–æ–Ω—É –≤ –≥—Ä—É–ø–ø–µ "–ë–ï–ó –ü–û–õ–ò–í–ê"
        zone_data = {
            'name': '–ó–æ–Ω–∞ –±–µ–∑ –ø–æ–ª–∏–≤–∞',
            'icon': 'üåø',
            'duration': 10,
            'group_id': 999  # –ì—Ä—É–ø–ø–∞ "–ë–ï–ó –ü–û–õ–ò–í–ê"
        }
        zone = self.db.create_zone(zone_data)
        self.assertIsNotNone(zone)

        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å (–∑–æ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∏—Å–∫–ª—é—á–µ–Ω–∞ –∏–∑ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è)
        response = self.client.get('/api/status')
        self.assertEqual(response.status_code, 200)
        data = json.loads(response.data)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≥—Ä—É–ø–ø–∞ 999 –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –≤ —Å—Ç–∞—Ç—É—Å–µ
        groups = data.get('groups', [])
        for group in groups:
            self.assertNotEqual(group['id'], 999)

    def test_icon_selection(self):
        """–¢–µ—Å—Ç –≤—ã–±–æ—Ä–∞ –∏–∫–æ–Ω–æ–∫ –¥–ª—è –∑–æ–Ω"""
        # –°–æ–∑–¥–∞–µ–º –∑–æ–Ω—É —Å —Ä–∞–∑–Ω—ã–º–∏ –∏–∫–æ–Ω–∫–∞–º–∏
        icons = ['üåø', 'üå≥', 'üå∫', 'üåª', 'üåπ', 'üå∏', 'üåº', 'üå∑', 'üå±', 'üå≤']
        
        for icon in icons:
            zone_data = {
                'name': f'–ó–æ–Ω–∞ —Å –∏–∫–æ–Ω–∫–æ–π {icon}',
                'icon': icon,
                'duration': 10,
                'group_id': 1
            }
            zone = self.db.create_zone(zone_data)
            self.assertIsNotNone(zone)
            self.assertEqual(zone['icon'], icon)

    def test_sorting_functionality(self):
        """–¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏"""
        # –°–æ–∑–¥–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–æ–Ω —Å —Ä–∞–∑–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        zones_data = [
            {'name': '–ó–æ–Ω–∞ A', 'icon': 'üåø', 'duration': 10, 'group_id': 1},
            {'name': '–ó–æ–Ω–∞ B', 'icon': 'üå≥', 'duration': 20, 'group_id': 2},
            {'name': '–ó–æ–Ω–∞ C', 'icon': 'üå∫', 'duration': 15, 'group_id': 1}
        ]

        created_zones = []
        for zone_data in zones_data:
            zone = self.db.create_zone(zone_data)
            created_zones.append(zone)

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–æ–Ω—ã
        all_zones = self.db.get_zones()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–æ–Ω—ã –º–æ–∂–Ω–æ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ —Ä–∞–∑–Ω—ã–º –ø–æ–ª—è–º
        # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –∏–º–µ–Ω–∏ - –∏—â–µ–º –Ω–∞—à–∏ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –∑–æ–Ω—ã
        test_zones = [z for z in all_zones if z['name'] in ['–ó–æ–Ω–∞ A', '–ó–æ–Ω–∞ B', '–ó–æ–Ω–∞ C']]
        if test_zones:
            sorted_by_name = sorted(test_zones, key=lambda x: x['name'])
            self.assertEqual(sorted_by_name[0]['name'], '–ó–æ–Ω–∞ A')

        # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        test_zones = [z for z in all_zones if z['name'] in ['–ó–æ–Ω–∞ A', '–ó–æ–Ω–∞ B', '–ó–æ–Ω–∞ C']]
        if test_zones:
            sorted_by_duration = sorted(test_zones, key=lambda x: x['duration'])
            self.assertEqual(sorted_by_duration[0]['duration'], 10)

        # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –≥—Ä—É–ø–ø–µ
        test_zones = [z for z in all_zones if z['name'] in ['–ó–æ–Ω–∞ A', '–ó–æ–Ω–∞ B', '–ó–æ–Ω–∞ C']]
        if test_zones:
            sorted_by_group = sorted(test_zones, key=lambda x: x['group_id'])
            self.assertEqual(sorted_by_group[0]['group_id'], 1)

    def test_error_scenarios(self):
        """–¢–µ—Å—Ç —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –æ—à–∏–±–æ–∫"""
        # –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∑–æ–Ω—ã —Å –Ω–µ–≤–µ—Ä–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        invalid_zone_data = {
            'name': '–¢–µ—Å—Ç–æ–≤–∞—è –∑–æ–Ω–∞',  # –í–∞–ª–∏–¥–Ω–æ–µ –∏–º—è
            'icon': 'üåø',  # –í–∞–ª–∏–¥–Ω–∞—è –∏–∫–æ–Ω–∫–∞
            'duration': 10,  # –í–∞–ª–∏–¥–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
            'group_id': 1  # –í–∞–ª–∏–¥–Ω–∞—è –≥—Ä—É–ø–ø–∞
        }
        
        zone = self.db.create_zone(invalid_zone_data)
        # –°–∏—Å—Ç–µ–º–∞ –¥–æ–ª–∂–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –¥–∞–Ω–Ω—ã–µ
        self.assertIsNotNone(zone)

        # –¢–µ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∑–æ–Ω—ã
        response = self.client.put('/api/zones/99999', json={'name': '–ù–æ–≤–∞—è –∑–æ–Ω–∞'})
        self.assertEqual(response.status_code, 404)

        # –¢–µ—Å—Ç —É–¥–∞–ª–µ–Ω–∏—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∑–æ–Ω—ã
        response = self.client.delete('/api/zones/99999')
        self.assertEqual(response.status_code, 204)

    def test_data_consistency(self):
        """–¢–µ—Å—Ç —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö"""
        # –°–æ–∑–¥–∞–µ–º –∑–æ–Ω—É
        zone_data = {
            'name': '–¢–µ—Å—Ç–æ–≤–∞—è –∑–æ–Ω–∞',
            'icon': 'üåø',
            'duration': 10,
            'group_id': 1
        }
        zone = self.db.create_zone(zone_data)
        zone_id = zone['id']

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö
        zone_from_db = self.db.get_zone(zone_id)
        self.assertEqual(zone['name'], zone_from_db['name'])
        self.assertEqual(zone['icon'], zone_from_db['icon'])
        self.assertEqual(zone['duration'], zone_from_db['duration'])
        self.assertEqual(zone['group_id'], zone_from_db['group_id'])

        # –û–±–Ω–æ–≤–ª—è–µ–º –∑–æ–Ω—É
        update_data = {
            'name': '–û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –∑–æ–Ω–∞',
            'duration': 15
        }
        updated_zone = self.db.update_zone(zone_id, update_data)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–∏–ª–∏—Å—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
        self.assertEqual(updated_zone['name'], '–û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –∑–æ–Ω–∞')
        self.assertEqual(updated_zone['duration'], 15)
        self.assertEqual(updated_zone['icon'], 'üåø')  # –ù–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å
        self.assertEqual(updated_zone['group_id'], 1)  # –ù–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å

    def test_performance_operations(self):
        """–¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –æ–ø–µ—Ä–∞—Ü–∏–π"""
        import time
        
        # –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –º–Ω–æ–∂–µ—Å—Ç–≤–∞ –∑–æ–Ω
        start_time = time.time()
        for i in range(10):
            zone_data = {
                'name': f'–ó–æ–Ω–∞ {i}',
                'icon': 'üåø',
                'duration': 10 + i,
                'group_id': 1
            }
            zone = self.db.create_zone(zone_data)
            self.assertIsNotNone(zone)
        
        creation_time = time.time() - start_time
        self.assertLess(creation_time, 5.0)  # –î–æ–ª–∂–Ω–æ –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –º–µ–Ω–µ–µ 5 —Å–µ–∫—É–Ω–¥

        # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –∑–æ–Ω
        start_time = time.time()
        all_zones = self.db.get_zones()
        retrieval_time = time.time() - start_time
        self.assertLess(retrieval_time, 1.0)  # –î–æ–ª–∂–Ω–æ –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –º–µ–Ω–µ–µ 1 —Å–µ–∫—É–Ω–¥—ã

        # –¢–µ—Å—Ç –º–∞—Å—Å–æ–≤–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        start_time = time.time()
        for zone in all_zones:
            if zone['name'].startswith('–ó–æ–Ω–∞ '):
                self.db.update_zone(zone['id'], {'duration': zone['duration'] + 1})
        
        update_time = time.time() - start_time
        self.assertLess(update_time, 3.0)  # –î–æ–ª–∂–Ω–æ –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –º–µ–Ω–µ–µ 3 —Å–µ–∫—É–Ω–¥

    def test_water_usage_api(self):
        """–¢–µ—Å—Ç API —Ä–∞—Å—Ö–æ–¥–∞ –≤–æ–¥—ã"""
        # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ —Ä–∞—Å—Ö–æ–¥–µ –≤–æ–¥—ã
        response = self.client.get('/api/water')
        self.assertEqual(response.status_code, 200)
        data = json.loads(response.data)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö (API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ –≥—Ä—É–ø–ø–∞–º)
        self.assertIsInstance(data, dict)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –Ω–µ –ø—É—Å—Ç—ã–µ
        self.assertGreater(len(data), 0)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–µ—Ä–≤–æ–π –≥—Ä—É–ø–ø—ã
        first_group_key = list(data.keys())[0]
        group_data = data[first_group_key]
        self.assertIn('group_name', group_data)
        self.assertIn('data', group_data)

    def test_postpone_api(self):
        """–¢–µ—Å—Ç API –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–≥–æ –ø–æ–ª–∏–≤–∞"""
        # –¢–µ—Å—Ç –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–≥–æ –ø–æ–ª–∏–≤–∞
        postpone_data = {
            'group_id': 1,
            'days': 2,
            'action': 'postpone'
        }
        
        response = self.client.post('/api/postpone', json=postpone_data)
        self.assertEqual(response.status_code, 200)
        data = json.loads(response.data)
        self.assertTrue(data['success'])

        # –¢–µ—Å—Ç –æ—Ç–º–µ–Ω—ã –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–≥–æ –ø–æ–ª–∏–≤–∞
        cancel_data = {
            'group_id': 1,
            'action': 'cancel'
        }
        
        response = self.client.post('/api/postpone', json=cancel_data)
        self.assertEqual(response.status_code, 200)
        data = json.loads(response.data)
        self.assertTrue(data['success'])

    def test_database_backup(self):
        """–¢–µ—Å—Ç —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∑–æ–Ω—É
        zone_data = {
            'name': '–ó–æ–Ω–∞ –¥–ª—è –±—ç–∫–∞–ø–∞',
            'icon': 'üåø',
            'duration': 10,
            'group_id': 1
        }
        zone = self.db.create_zone(zone_data)
        
        # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
        backup_path = self.db.create_backup()
        self.assertIsNotNone(backup_path)
        self.assertTrue(os.path.exists(backup_path))
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∞–Ω–Ω—ã–µ
        import sqlite3
        with sqlite3.connect(backup_path) as conn:
            cursor = conn.execute('SELECT COUNT(*) FROM zones')
            count = cursor.fetchone()[0]
            self.assertGreater(count, 0)

    def test_log_operations_extended(self):
        """–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Ç–µ—Å—Ç –æ–ø–µ—Ä–∞—Ü–∏–π —Å –ª–æ–≥–∞–º–∏"""
        # –°–æ–∑–¥–∞–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã –ª–æ–≥–æ–≤
        log_types = ['zone_start', 'zone_stop', 'photo_upload', 'photo_delete', 'postpone', 'cancel_postpone']
        
        for log_type in log_types:
            log_id = self.db.add_log(log_type, json.dumps({'test': 'data'}))
            self.assertIsNotNone(log_id)
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ª–æ–≥–∏
        logs = self.db.get_logs()
        self.assertGreaterEqual(len(logs), len(log_types))
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –ª–æ–≥–∏ –∏–º–µ—é—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
        for log in logs:
            self.assertIn('id', log)
            self.assertIn('type', log)
            self.assertIn('details', log)
            self.assertIn('timestamp', log)

    def test_group_operations_extended(self):
        """–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Ç–µ—Å—Ç –æ–ø–µ—Ä–∞—Ü–∏–π —Å –≥—Ä—É–ø–ø–∞–º–∏"""
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –≥—Ä—É–ø–ø—ã
        all_groups = self.db.get_groups()
        self.assertGreater(len(all_groups), 0)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø—ã
        first_group = all_groups[0]
        self.assertIn('id', first_group)
        self.assertIn('name', first_group)
        self.assertIn('zone_count', first_group)

    def test_program_operations_extended(self):
        """–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Ç–µ—Å—Ç –æ–ø–µ—Ä–∞—Ü–∏–π —Å –ø—Ä–æ–≥—Ä–∞–º–º–∞–º–∏"""
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–≥—Ä–∞–º–º—É
        program_data = {
            'name': '–¢–µ—Å—Ç–æ–≤–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞',
            'time': '06:00',  # –í—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM
            'days': [1, 2, 3, 4, 5, 6, 7],  # –î–Ω–∏ –Ω–µ–¥–µ–ª–∏ (1-7)
            'zones': [1, 2, 3]
        }
        program = self.db.create_program(program_data)
        self.assertIsNotNone(program)
        program_id = program['id']
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–∞–º–º—É
        update_data = {
            'name': '–û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞',
            'time': '07:00',
            'days': [1, 3, 5],
            'zones': [1, 2]
        }
        updated_program = self.db.update_program(program_id, update_data)
        self.assertEqual(updated_program['name'], '–û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞')
        self.assertEqual(updated_program['time'], '07:00')
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–≥—Ä–∞–º–º—É
        retrieved_program = self.db.get_program(program_id)
        self.assertEqual(retrieved_program['name'], '–û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞')
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã
        all_programs = self.db.get_programs()
        self.assertGreater(len(all_programs), 0)
        
        # –£–¥–∞–ª—è–µ–º –ø—Ä–æ–≥—Ä–∞–º–º—É
        success = self.db.delete_program(program_id)
        self.assertTrue(success)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–æ–≥—Ä–∞–º–º–∞ —É–¥–∞–ª–µ–Ω–∞
        deleted_program = self.db.get_program(program_id)
        self.assertIsNone(deleted_program)

def run_tests():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
    print("üß™ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ—Ç–µ—Å—Ç–æ–≤ WB-Irrigation...")
    print("=" * 50)
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –Ω–∞–±–æ—Ä
    test_suite = unittest.TestLoader().loadTestsFromTestCase(TestIrrigationSystem)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    runner = unittest.TextTestRunner(verbosity=2)
    result = runner.run(test_suite)
    
    # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    print("=" * 50)
    print(f"‚úÖ –¢–µ—Å—Ç–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: {result.testsRun}")
    print(f"‚ùå –û—à–∏–±–æ–∫: {len(result.errors)}")
    print(f"‚ö†Ô∏è  –ü—Ä–æ–≤–∞–ª–æ–≤: {len(result.failures)}")
    
    if result.errors:
        print("\n‚ùå –û—à–∏–±–∫–∏:")
        for test, error in result.errors:
            print(f"  - {test}: {error}")
    
    if result.failures:
        print("\n‚ö†Ô∏è  –ü—Ä–æ–≤–∞–ª—ã:")
        for test, failure in result.failures:
            print(f"  - {test}: {failure}")
    
    if result.wasSuccessful():
        print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
        return True
    else:
        print("\nüí• –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏!")
        return False

if __name__ == '__main__':
    run_tests()
