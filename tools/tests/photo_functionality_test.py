#!/usr/bin/env python3
"""
–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏ WB-Irrigation
–î–µ—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏, –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏ –∑–æ–Ω
"""

import unittest
import time
import tempfile
import os
import shutil
import subprocess
import requests
import json
from PIL import Image
import io
import base64

class PhotoFunctionalityTest(unittest.TestCase):
    """–¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏"""
    
    @classmethod
    def setUpClass(cls):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ–¥ –≤—Å–µ–º–∏ —Ç–µ—Å—Ç–∞–º–∏"""
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        cls.test_db_path = tempfile.mktemp(suffix='.db')
        cls.test_backup_dir = tempfile.mkdtemp()
        cls.test_photos_dir = tempfile.mkdtemp()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ—Å—Å–∏–∏ requests
        cls.session = requests.Session()
        cls.session.headers.update({
            'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36'
        })
        
        # –ó–∞–ø—É—Å–∫ Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        cls.app_process = None
        cls.start_flask_app()
        
        # –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        cls.wait_for_app_startup()
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–∞–∑–Ω—ã—Ö —Ä–∞–∑–º–µ—Ä–æ–≤
        cls.create_test_images()
    
    @classmethod
    def tearDownClass(cls):
        """–û—á–∏—Å—Ç–∫–∞ –ø–æ—Å–ª–µ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
        if cls.app_process:
            cls.app_process.terminate()
            cls.app_process.wait()
        
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        if os.path.exists(cls.test_db_path):
            os.remove(cls.test_db_path)
        if os.path.exists(cls.test_backup_dir):
            shutil.rmtree(cls.test_backup_dir)
        if os.path.exists(cls.test_photos_dir):
            shutil.rmtree(cls.test_photos_dir)
    
    @classmethod
    def start_flask_app(cls):
        """–ó–∞–ø—É—Å–∫ Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        env = os.environ.copy()
        env['TESTING'] = '1'
        env['TEST_DB_PATH'] = cls.test_db_path
        env['TEST_BACKUP_DIR'] = cls.test_backup_dir
        env['TEST_PHOTOS_DIR'] = cls.test_photos_dir
        
        cls.app_process = subprocess.Popen(
            ['python', 'run.py'],
            env=env,
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE
        )
    
    @classmethod
    def wait_for_app_startup(cls):
        """–û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        max_attempts = 30
        for attempt in range(max_attempts):
            try:
                response = cls.session.get('http://localhost:8080/api/status', timeout=1)
                if response.status_code == 200:
                    print(f"‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ –Ω–∞ –ø–æ–ø—ã—Ç–∫–µ {attempt + 1}")
                    return
            except requests.exceptions.RequestException:
                pass
            time.sleep(1)
        raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ")
    
    @classmethod
    def create_test_images(cls):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Ä–∞–∑–Ω—ã—Ö —Ä–∞–∑–º–µ—Ä–æ–≤"""
        # –ú–∞–ª–µ–Ω—å–∫–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ 100x100
        img_small = Image.new('RGB', (100, 100), color='red')
        img_small_byte_arr = io.BytesIO()
        img_small.save(img_small_byte_arr, format='JPEG')
        img_small_byte_arr.seek(0)
        cls.test_image_small = img_small_byte_arr.getvalue()
        
        # –°—Ä–µ–¥–Ω–µ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ 500x500
        img_medium = Image.new('RGB', (500, 500), color='blue')
        img_medium_byte_arr = io.BytesIO()
        img_medium.save(img_medium_byte_arr, format='JPEG')
        img_medium_byte_arr.seek(0)
        cls.test_image_medium = img_medium_byte_arr.getvalue()
        
        # –ë–æ–ª—å—à–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ 1920x1080
        img_large = Image.new('RGB', (1920, 1080), color='green')
        img_large_byte_arr = io.BytesIO()
        img_large.save(img_large_byte_arr, format='JPEG')
        img_large_byte_arr.seek(0)
        cls.test_image_large = img_large_byte_arr.getvalue()
        
        print("‚úÖ –°–æ–∑–¥–∞–Ω–æ 3 —Ç–µ—Å—Ç–æ–≤—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–∞–∑–Ω—ã—Ö —Ä–∞–∑–º–µ—Ä–æ–≤")
    
    def test_01_photo_upload_small_image(self):
        """–¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –º–∞–ª–µ–Ω—å–∫–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        print("üß™ –¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –º–∞–ª–µ–Ω—å–∫–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (100x100)...")
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        temp_file = tempfile.NamedTemporaryFile(suffix='.jpg', delete=False)
        temp_file.write(self.test_image_small)
        temp_file.close()
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∑–æ–Ω—ã 1
        with open(temp_file.name, 'rb') as f:
            files = {'photo': ('test_small.jpg', f, 'image/jpeg')}
            response = self.session.post('http://localhost:8080/api/zones/1/photo', files=files)
        
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        os.unlink(temp_file.name)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        self.assertEqual(response.status_code, 200, "–ó–∞–≥—Ä—É–∑–∫–∞ –º–∞–ª–µ–Ω—å–∫–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å")
        result = response.json()
        self.assertIn('success', result)
        self.assertTrue(result['success'])
        print("‚úÖ –ú–∞–ª–µ–Ω—å–∫–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
    
    def test_02_photo_upload_medium_image(self):
        """–¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ä–µ–¥–Ω–µ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        print("üß™ –¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ä–µ–¥–Ω–µ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (500x500)...")
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        temp_file = tempfile.NamedTemporaryFile(suffix='.jpg', delete=False)
        temp_file.write(self.test_image_medium)
        temp_file.close()
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∑–æ–Ω—ã 2
        with open(temp_file.name, 'rb') as f:
            files = {'photo': ('test_medium.jpg', f, 'image/jpeg')}
            response = self.session.post('http://localhost:8080/api/zones/2/photo', files=files)
        
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        os.unlink(temp_file.name)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        self.assertEqual(response.status_code, 200, "–ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ä–µ–¥–Ω–µ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å")
        result = response.json()
        self.assertIn('success', result)
        self.assertTrue(result['success'])
        print("‚úÖ –°—Ä–µ–¥–Ω–µ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
    
    def test_03_photo_upload_large_image(self):
        """–¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –±–æ–ª—å—à–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        print("üß™ –¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –±–æ–ª—å—à–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (1920x1080)...")
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        temp_file = tempfile.NamedTemporaryFile(suffix='.jpg', delete=False)
        temp_file.write(self.test_image_large)
        temp_file.close()
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∑–æ–Ω—ã 3
        with open(temp_file.name, 'rb') as f:
            files = {'photo': ('test_large.jpg', f, 'image/jpeg')}
            response = self.session.post('http://localhost:8080/api/zones/3/photo', files=files)
        
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        os.unlink(temp_file.name)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        self.assertEqual(response.status_code, 200, "–ó–∞–≥—Ä—É–∑–∫–∞ –±–æ–ª—å—à–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å")
        result = response.json()
        self.assertIn('success', result)
        self.assertTrue(result['success'])
        print("‚úÖ –ë–æ–ª—å—à–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
    
    def test_04_photo_retrieval(self):
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π"""
        print("üß™ –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π...")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –¥–ª—è –≤—Å–µ—Ö –∑–æ–Ω
        for zone_id in [1, 2, 3]:
            response = self.session.get(f'http://localhost:8080/api/zones/{zone_id}/photo?image=true')
            
            if response.status_code == 200:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                content_type = response.headers.get('content-type', '')
                self.assertIn('image', content_type, f"–ó–æ–Ω–∞ {zone_id}: –ù–µ–≤–µ—Ä–Ω—ã–π content-type")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                image_data = response.content
                self.assertGreater(len(image_data), 0, f"–ó–æ–Ω–∞ {zone_id}: –ü—É—Å—Ç–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –≤–∞–ª–∏–¥–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                try:
                    img = Image.open(io.BytesIO(image_data))
                    print(f"‚úÖ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –∑–æ–Ω—ã {zone_id} –ø–æ–ª—É—á–µ–Ω–∞: {img.size[0]}x{img.size[1]} –ø–∏–∫—Å–µ–ª–µ–π")
                except Exception as e:
                    self.fail(f"–ó–æ–Ω–∞ {zone_id}: –ù–µ–≤–∞–ª–∏–¥–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ - {e}")
            else:
                print(f"‚ö†Ô∏è  –ó–æ–Ω–∞ {zone_id}: –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ (–∫–æ–¥ {response.status_code})")
    
    def test_05_photo_compression(self):
        """–¢–µ—Å—Ç —Å–∂–∞—Ç–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
        print("üß™ –¢–µ—Å—Ç —Å–∂–∞—Ç–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π...")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –±–æ–ª—å—à–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–∂–∞—Ç–∏–µ
        temp_file = tempfile.NamedTemporaryFile(suffix='.jpg', delete=False)
        temp_file.write(self.test_image_large)
        temp_file.close()
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        original_size = len(self.test_image_large)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        with open(temp_file.name, 'rb') as f:
            files = {'photo': ('test_compression.jpg', f, 'image/jpeg')}
            response = self.session.post('http://localhost:8080/api/zones/4/photo', files=files)
        
        os.unlink(temp_file.name)
        
        self.assertEqual(response.status_code, 200, "–ó–∞–≥—Ä—É–∑–∫–∞ –¥–ª—è —Ç–µ—Å—Ç–∞ —Å–∂–∞—Ç–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–∂–∞—Ç–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        response = self.session.get('http://localhost:8080/api/zones/4/photo?image=true')
        self.assertEqual(response.status_code, 200, "–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∂–∞—Ç–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ —É–¥–∞–ª–æ—Å—å")
        
        compressed_size = len(response.content)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±—ã–ª–æ —Å–∂–∞—Ç–æ (—Ä–∞–∑–º–µ—Ä —É–º–µ–Ω—å—à–∏–ª—Å—è)
        self.assertLess(compressed_size, original_size, "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –±—ã–ª–æ —Å–∂–∞—Ç–æ")
        
        compression_ratio = (1 - compressed_size / original_size) * 100
        print(f"‚úÖ –°–∂–∞—Ç–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {compression_ratio:.1f}% (—Å {original_size} –¥–æ {compressed_size} –±–∞–π—Ç)")
    
    def test_06_photo_error_handling(self):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏"""
        print("üß™ –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏...")
        
        # –¢–µ—Å—Ç 1: –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª –±–µ–∑ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
        response = self.session.post('http://localhost:8080/api/zones/1/photo')
        self.assertNotEqual(response.status_code, 200, "–î–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ —Ñ–∞–π–ª–∞")
        print("‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–µ–≥–æ —Ñ–∞–π–ª–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        
        # –¢–µ—Å—Ç 2: –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∑–æ–Ω—ã
        response = self.session.get('http://localhost:8080/api/zones/999/photo?image=true')
        self.assertEqual(response.status_code, 404, "–î–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—à–∏–±–∫–∞ 404 –¥–ª—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∑–æ–Ω—ã")
        print("‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∑–æ–Ω—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        
        # –¢–µ—Å—Ç 3: –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª –±–µ–∑ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
        response = self.session.post('http://localhost:8080/api/zones/1/photo')
        self.assertNotEqual(response.status_code, 200, "–î–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ —Ñ–∞–π–ª–∞")
        print("‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–µ–≥–æ —Ñ–∞–π–ª–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    
    def test_07_photo_multiple_formats(self):
        """–¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤"""
        print("üß™ –¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤...")
        
        # –°–æ–∑–¥–∞–µ–º PNG –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        img_png = Image.new('RGB', (200, 200), color='yellow')
        png_byte_arr = io.BytesIO()
        img_png.save(png_byte_arr, format='PNG')
        png_byte_arr.seek(0)
        png_data = png_byte_arr.getvalue()
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º PNG –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        temp_file = temp_file = tempfile.NamedTemporaryFile(suffix='.png', delete=False)
        temp_file.write(png_data)
        temp_file.close()
        
        with open(temp_file.name, 'rb') as f:
            files = {'photo': ('test_png.png', f, 'image/png')}
            response = self.session.post('http://localhost:8080/api/zones/5/photo', files=files)
        
        os.unlink(temp_file.name)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if response.status_code == 200:
            print("‚úÖ PNG –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
        else:
            print(f"‚ö†Ô∏è  PNG –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ (–∫–æ–¥ {response.status_code})")
    
    def test_08_photo_storage_verification(self):
        """–¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π"""
        print("üß™ –¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π...")
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–æ–Ω–∞—Ö
        response = self.session.get('http://localhost:8080/api/zones')
        self.assertEqual(response.status_code, 200, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–æ–Ω")
        
        zones = response.json()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –∑–æ–Ω –µ—Å—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è—Ö
        zones_with_photos = 0
        for zone in zones:
            if 'photo_path' in zone and zone['photo_path']:
                zones_with_photos += 1
                print(f"‚úÖ –ó–æ–Ω–∞ {zone['id']}: —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –Ω–∞–π–¥–µ–Ω–∞")
        
        print(f"‚úÖ –í—Å–µ–≥–æ –∑–æ–Ω —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏: {zones_with_photos}")
        self.assertGreater(zones_with_photos, 0, "–î–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–∞ –∑–æ–Ω–∞ —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–µ–π")
    
    def test_09_photo_performance(self):
        """–¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ä–∞–±–æ—Ç—ã —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏"""
        print("üß™ –¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ä–∞–±–æ—Ç—ã —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏...")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
        start_time = time.time()
        response = self.session.get('http://localhost:8080/api/zones/1/photo?image=true')
        load_time = time.time() - start_time
        
        self.assertEqual(response.status_code, 200, "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é")
        self.assertLess(load_time, 1.0, f"–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Å–ª–∏—à–∫–æ–º –º–µ–¥–ª–µ–Ω–Ω–∞—è: {load_time:.2f} —Å–µ–∫")
        print(f"‚úÖ –í—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏: {load_time:.3f} —Å–µ–∫")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–æ–≤–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        temp_file = tempfile.NamedTemporaryFile(suffix='.jpg', delete=False)
        temp_file.write(self.test_image_small)
        temp_file.close()
        
        start_time = time.time()
        with open(temp_file.name, 'rb') as f:
            files = {'photo': ('test_performance.jpg', f, 'image/jpeg')}
            response = self.session.post('http://localhost:8080/api/zones/6/photo', files=files)
        
        upload_time = time.time() - start_time
        os.unlink(temp_file.name)
        
        self.assertEqual(response.status_code, 200, "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
        self.assertLess(upload_time, 5.0, f"–ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ª–∏—à–∫–æ–º –º–µ–¥–ª–µ–Ω–Ω–∞—è: {upload_time:.2f} —Å–µ–∫")
        print(f"‚úÖ –í—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {upload_time:.3f} —Å–µ–∫")
    
    def test_10_photo_cleanup(self):
        """–¢–µ—Å—Ç –æ—á–∏—Å—Ç–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π"""
        print("üß™ –¢–µ—Å—Ç –æ—á–∏—Å—Ç–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –Ω–µ –æ—Å—Ç–∞–ª–∏—Å—å
        temp_files = []
        for root, dirs, files in os.walk(self.test_photos_dir):
            for file in files:
                if file.endswith('.tmp'):
                    temp_files.append(os.path.join(root, file))
        
        self.assertEqual(len(temp_files), 0, f"–ù–∞–π–¥–µ–Ω—ã –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã: {temp_files}")
        print("‚úÖ –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –æ—á–∏—â–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏—Å—å –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        saved_photos = []
        main_photos_dir = 'static/photos'
        if os.path.exists(main_photos_dir):
            for root, dirs, files in os.walk(main_photos_dir):
                for file in files:
                    if file.endswith(('.jpg', '.jpeg', '.png')):
                        saved_photos.append(os.path.join(root, file))
        
        print(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π: {len(saved_photos)}")
        self.assertGreater(len(saved_photos), 0, "–î–æ–ª–∂–Ω—ã –±—ã—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏")

if __name__ == '__main__':
    print("üß™ –ó–∞–ø—É—Å–∫ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏ WB-Irrigation...")
    print("=" * 70)
    
    # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
    unittest.main(verbosity=2, exit=False)
    
    print("=" * 70)
    print("üéâ –¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏ –∑–∞–≤–µ—Ä—à–µ–Ω!")
