#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ WB-Irrigation
–í–∫–ª—é—á–∞–µ—Ç –º–æ–¥—É–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã –∏ –≤–µ–±-—Ç–µ—Å—Ç—ã
"""

import subprocess
import sys
import time
import os
from datetime import datetime

def run_command(command, description):
    """–ó–∞–ø—É—Å–∫ –∫–æ–º–∞–Ω–¥—ã —Å –≤—ã–≤–æ–¥–æ–º"""
    print(f"\n{'='*60}")
    print(f"üß™ {description}")
    print(f"{'='*60}")
    
    start_time = time.time()
    try:
        result = subprocess.run(command, shell=True, capture_output=True, text=True)
        end_time = time.time()
        duration = end_time - start_time
        
        print(f"‚è±Ô∏è  –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {duration:.2f} —Å–µ–∫—É–Ω–¥")
        
        if result.returncode == 0:
            print("‚úÖ –£—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ")
            print("\nüìã –í—ã–≤–æ–¥:")
            print(result.stdout)
            return True, result.stdout
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è")
            print("\nüìã –í—ã–≤–æ–¥:")
            print(result.stdout)
            print("\nüö® –û—à–∏–±–∫–∏:")
            print(result.stderr)
            return False, result.stderr
            
    except Exception as e:
        print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")
        return False, str(e)

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è WB-Irrigation")
    print(f"üìÖ –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print("="*80)
    
    # –ê–∫—Ç–∏–≤–∞—Ü–∏—è –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–π —Å—Ä–µ–¥—ã
    if not os.path.exists('venv'):
        print("‚ùå –í–∏—Ä—Ç—É–∞–ª—å–Ω–∞—è —Å—Ä–µ–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        return
    
    # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤
    test_results = []
    
    # 1. –ú–æ–¥—É–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã
    success, output = run_command(
        "source venv/bin/activate && python tools/tests/tests.py",
        "–ú–æ–¥—É–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã (tests.py)"
    )
    test_results.append(("–ú–æ–¥—É–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã", success, output))
    
    # 2. –í–µ–±-—Ç–µ—Å—Ç—ã (–ø—Ä–æ—Å—Ç—ã–µ)
    success, output = run_command(
        "source venv/bin/activate && python tools/tests/web_tests_simple.py",
        "–í–µ–±-—Ç–µ—Å—Ç—ã (–ø—Ä–æ—Å—Ç—ã–µ)"
    )
    test_results.append(("–í–µ–±-—Ç–µ—Å—Ç—ã (–ø—Ä–æ—Å—Ç—ã–µ)", success, output))
    
    # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Selenium –¥–ª—è —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
    try:
        from selenium import webdriver
        from webdriver_manager.chrome import ChromeDriverManager
        # 3. –í–µ–±-—Ç–µ—Å—Ç—ã (—Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ)
        success, output = run_command(
            "source venv/bin/activate && python tools/tests/web_tests_realistic.py",
            "–í–µ–±-—Ç–µ—Å—Ç—ã (—Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ)"
        )
        test_results.append(("–í–µ–±-—Ç–µ—Å—Ç—ã (—Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ)", success, output))
        print("‚úÖ Selenium –¥–æ—Å—Ç—É–ø–µ–Ω - –¥–æ–±–∞–≤–ª–µ–Ω—ã —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ —Ç–µ—Å—Ç—ã")
    except ImportError:
        print("‚ö†Ô∏è  Selenium –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ —Ç–µ—Å—Ç—ã")
        print("üí° –î–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Selenium –∑–∞–ø—É—Å—Ç–∏—Ç–µ: python setup_selenium.py")
    
    # 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞
    success, output = run_command(
        "source venv/bin/activate && python -m py_compile app.py database.py run.py",
        "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ Python —Ñ–∞–π–ª–æ–≤"
    )
    test_results.append(("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞", success, output))
    
    # 6. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–ø–æ—Ä—Ç–æ–≤
    success, output = run_command(
        "source venv/bin/activate && python -c 'import app; import database; print(\"‚úÖ –í—Å–µ –º–æ–¥—É–ª–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä—É—é—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ\")'",
        "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–ø–æ—Ä—Ç–æ–≤ –º–æ–¥—É–ª–µ–π"
    )
    test_results.append(("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–ø–æ—Ä—Ç–æ–≤", success, output))
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
    print(f"\n{'='*80}")
    print("üìä –û–¢–ß–ï–¢ –û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ò")
    print(f"{'='*80}")
    
    total_tests = len(test_results)
    passed_tests = sum(1 for _, success, _ in test_results if success)
    failed_tests = total_tests - passed_tests
    
    print(f"üìà –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {total_tests}")
    print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {passed_tests}")
    print(f"‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {failed_tests}")
    print(f"üìä –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {(passed_tests/total_tests)*100:.1f}%")
    
    print(f"\nüìã –î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
    for test_name, success, output in test_results:
        status = "‚úÖ –ü–†–û–ô–î–ï–ù" if success else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
        print(f"  {status} - {test_name}")
    
    # –û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    if failed_tests == 0:
        print(f"\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        print("üöÄ –ü—Ä–æ–µ–∫—Ç –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é")
        return 0
    else:
        print(f"\n‚ö†Ô∏è  –ù–ê–ô–î–ï–ù–´ –ü–†–û–ë–õ–ï–ú–´: {failed_tests} —Ç–µ—Å—Ç(–æ–≤) –ø—Ä–æ–≤–∞–ª–µ–Ω–æ")
        print("üîß –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—ã –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º")
        return 1

if __name__ == '__main__':
    exit_code = main()
    sys.exit(exit_code)
